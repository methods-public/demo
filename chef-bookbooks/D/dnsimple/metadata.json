{"name":"dnsimple","version":"2.1.1","description":"Provides Chef Resource for automating DNS configuration with DNSimple","long_description":"## Description\n\nA chef resource for automated DNS configuration via the [dnsimple](https://dnsimple.com/) API.\n\n[![Build Status](https://travis-ci.org/dnsimple/chef-dnsimple.png?branch=master)](https://travis-ci.org/dnsimple/chef-dnsimple)\n[![Build Status](https://jenkins-01.eastus.cloudapp.azure.com/job/dnsimple-cookbook/badge/icon)](https://jenkins-01.eastus.cloudapp.azure.com/job/dnsimple-cookbook/)\n\n## DEPRECATION WARNING\n\nIf you used the 1.x series of this cookbook please carefully review your usage of the resource and create a new account access token. The access token you used previously _will not work_ with this version of the cookbook. You will also not need a username and password for this version either. Please refer to the examples below for more details, but the majority of the changes are around authentication.\n\n## Requirements\n\n* A [dnsimple](https://dnsimple.com/) account\n* An [account access token](https://developer.dnsimple.com/v2/#account-tokens-vs-user-tokens) from said dnsimple account\n* Chef 12.8 or newer\n\n## Attributes\n\n- None\n\n## Resources/Providers\n\n### dnsimple\\_record\n\nManage a DNS record through the dnsimple API. This resource uses the\n[dnsimple Ruby library](https://rubygems.org/gems/dnsimple) to connect and use\nthe dnsimple API. This resource also exposes a ChefSpec matcher for you to do\nunit testing as well.\n\n#### Actions:\n\n| Action    | Description          | Default |\n|-----------|----------------------|---------|\n| *create*  | Create the record.   | Yes     |\n| *update*  | Update the record.   |         |\n| *destroy* | Destroy the record.  |         |\n\n#### Parameter Attributes:\n\nThe type of record can be one of the following: A, CNAME, ALIAS, MX,\nSPF, URL, TXT, NS, SRV, NAPTR, PTR, AAA, SSHFP, or HFINO.\n\n| Parameter  | Description                      | Required | Default            |\n|------------|----------------------------------|----------|--------------------|\n| *domain*   | Domain to manage                 | true     |                    |\n| *name*     | Name of the record               |          | Apex of the domain |\n| *type*     | Type of DNS record               | true     |                    |\n| *content*  | String/Array content of records  | true     |                    |\n| *ttl*      | Time to live                     |          | 3600               |\n| *priority* | Priorty of record                |          |                    |\n| *regions*  | Specific regions for this record |          |                    |\n| *token*    | DNSimple API token               |          |                    |\n\n**Note**: If you do not provide the name parameter, it will be assumed from the\nresource name, which cannot be blank. If you want to create multiple record\ntypes on the apex then you need to name each resource separately, but keep the\nname an empty string.\n\n**Regional Records**: Only certain plan types have regional records so it is\nblank by default. If you do not have this feature available it will return\nan error.\n\n#### Examples\n\nNote that these examples assume you have obtained an account level access token\nwhich is documented above (see Requirements). We're also assuming you're securely\nstoring your API keys in [Chef Vault](https://docs.chef.io/chef_vault.html) but\nit is not a requirement.\n\n```ruby\ndnsimple_record 'fooserver' do\n  domain 'foo.com'\n  type 'A'\n  content '1.2.3.4'\n  ttl 3600\n  access_token chef_vault_item('secrets', 'dnsimple_token')\n  action :create\nend\n\ndnsimple_record 'create a CNAME record for a Google Apps site calendar' do\n  name 'calendar'\n  content 'ghs.google.com'\n  type 'CNAME'\n  domain 'example.com'\n  access_token chef_vault_item('secrets', 'dnsimple_token')\n  action :create\nend\n\ndnsimple_record \"create a A record with multiple content values\" do\n  name     'servers'\n  content  ['1.1.1.1', '2.2.2.2']\n  type     'A'\n  domain   'example.com'\n  access_token chef_vault_item('secrets', 'dnsimple_token')\n  action   :create\nend\n\n# Note: This only works with certain accounts, see the note above for\n# regional records! The Chef run will fail otherwise.\ndnsimple_record \"create an A record in Tokyo only\" do\n  name     'myserverinjapan'\n  content  '2.2.2.2'\n  type     'A'\n  domain   'example.com'\n  regions  ['tko']\n  access_token chef_vault_item('secrets', 'dnsimple_token')\n  action   :create\nend\n```\n\n### dnsimple\\_certificate\n\nDownload and install a certificate. Currently this only supports basic matched\n.crt & .key files. We would like to expand this to support all formats\nincluding java keystores. *PRs are welcome*!\n\nThis resource uses the [dnsimple Ruby\nlibrary](https://rubygems.org/gems/dnsimple) to connect and use the dnsimple\nAPI. This resource also exposes a ChefSpec matcher for you to do unit testing\nas well.\n\n\n#### Actions:\n\n| Action    | Description           | Default |\n|-----------|-----------------------|---------|\n| *install* | Install the crt & key | Yes     |\n\n\n#### Parameter Attributes:\n\n| Parameter               | Description                       | Required | Default |\n|-------------------------|-----------------------------------|----------|---------|\n| install_path            | where the crt & key are installed | yes      |         |\n| certificate_common_name | name of the files                 | yes      |         |\n| domain                  | the main domain name on the crt   | yes      |         |\n| mode                    | files mode                        | no       | 0600    |\n| owner                   | files owner                       | no       | root    |\n| group                   | files group                       | no       | root    |\n\n\n#### Examples\n\n```ruby\ndnsimple_certificate '/etc/apache2/ssl' do\n  certificate_common_name 'www.dnsimple.xyz'\n  domain 'dnsimple.xyz'\n  access_token chef_vault_item('secrets', 'dnsimple_token')\n  mode '0755'\n  owner 'web_admin'\n  group 'web_admin'\nend\n```\n\n## Usage\n\nAdd the dnsimple cookbook to your cookbook's metadata and it will automatically\ninstall the dnsimple gem and make the dnsimple\\_record resource available.\n\n## Testing\n\nSee TESTING.md\n\n## Contributing\n\nSee CONTRIBUTING.md\n\n## License and Authors\n\n* Author:: [Aaron Kalin](https://github.com/martinisoft)\n* Author:: [David Aronsohn](https://github.com/onlyhavecans)\n* Author:: [Jacobo Garcia](https://github.com/therobot)\n* Author:: [Anthony Eden](https://github.com/aeden)\n\nCopyright:: 2014-2017 Aetrion, LLC dba DNSimple\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n","maintainer":"Aetrion, LLC. dba DNSimple","maintainer_email":"ops@dnsimple.com","license":"Apache-2.0","platforms":{"amazon":">= 0.0.0","centos":">= 0.0.0","debian":">= 0.0.0","fedora":">= 0.0.0","freebsd":">= 0.0.0","redhat":">= 0.0.0","ubuntu":">= 0.0.0"},"dependencies":{},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{},"source_url":"https://github.com/dnsimple/chef-dnsimple","issues_url":"https://github.com/dnsimple/chef-dnsimple/issues","gems":[["dnsimple",">= 4.0"]],"chef_version":[[">= 12.8"]],"ohai_version":[]}