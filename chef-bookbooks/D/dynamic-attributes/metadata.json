{
  "name": "dynamic-attributes",
  "description": "Interprets and Rewrites Node Attributes",
  "long_description": "Dynamic Attributes\n==================\n\nDescription\n-----------\n\nInterprets and rewrites node attributes defined in roles to provide more\ndynamicity. For instance, it can be used to get the value of the fqdn in\na role by setting an attribute to \"node\\['fqdn'\\]\". This cookbook will\nreplace \"node\\['fqdn'\\]\" by its true value at execution (in compile phase) so\nit is available to other cookbooks. This allows a role to be more shareable\nbetween nodes.\n\nDifferent methods of substitution are available. Each method has its own recipe\nbut all are included by default recipe.\n\nKnown limitation: derived attributes defined in attribute files will not read\nthe rewritten values. This is because attribute files are initialized before\nrecipes are compiled, so before the substitutions take place. This will\nprobably not be fixed as it is actually a feature to do the substitution during\nthe cookbook compilation phase, so you may use as source an attribute defined\nin some other cookbook. Moreover, this limitation should not be encountered\nvery often and can be easily overcome by redefining the derived attributes.\n\nRequirements\n------------\n\n### Cookbooks and gems\n\nDeclared in [metadata.rb](metadata.rb) and in [Gemfile](Gemfile).\n\n### Platforms\n\nIt should work on any platform as it is pure ruby. However it is just tested\nwith kitchen on a Centos 7 docker image.\n\nUsage\n-----\n\n### To be started\n\nAdd the default recipe in you runlist in any position you\nwant, knowing that a source must be before and a reader must be after to see\nthe effect in compile phase.\n\nYou may also want to tweak attributes (like whitelisting).\n\nRead recipes documentation for more details.\n\n### Test\n\nThis cookbook is tested with kitchen on a Centos 7 docker image. A test\ncookbook is used to extract attributes after default recipe has run.\n\nFor more information, see [.kitchen.yml](.kitchen.yml) and [test](test)\ndirectory.\n\nAttributes\n----------\n\nConfiguration is done by overriding default attributes. All configuration keys\nhave a default defined in [attributes/default.rb](attributes/default.rb).\nPlease read it to have a comprehensive view of what and how you can configure\nthis cookbook behavior.\n\nRecipes\n-------\n\n### default\n\nInclude *replace* and then *eval* recipes. So it performs all substitutions,\none after another. Attribute key (keys in hashmaps) are also modified if\nneeded.\n\nNote that by default, *eval* has no effect as no attribute is whitelisted. In\ncontrary, *replace* is executed on all attributes.\n\nYou can look at examples defined as tests for more information.\n\n### eval\n\nEvaluate (with the use of eval method) whitelisted (default: none) attributes\nas if there were referenced in a double-quote string and set the result as new\nattribute value. For instance, an attribute with value \"1+#{1+1}\" will be\nrewrited as \"1+2\" (as it would be in ruby).\n\nBe careful with this substitution method as you can execute any ruby code. Be\nsure to whitelist only the attributes you need.\n\nYou can look at examples defined as tests for more information.\n\n### replace\n\nReplace (recursively) whitelisted (default: all) attributes of the form\n\"node\\['foo'\\]\\['bar'\\]\" to their \"true\" value. It is not a string\ninterpolation nor a substring replacement: it will work solely if the\nattributes value is exactly \"node\\['something'\\]\".\n\nIf the target value does not exist (like \"node\\['doesnotexist'\\]\"), it keeps\nthe current value (that is the string \"node\\['doesnotexist'\\]\").\n\nYou can look at examples defined as tests for more information.\n\nLibraries\n---------\n\nProvide implementation of the different methods: eval and replace.\n\nResources/Providers\n-------------------\n\nNone.\n\nChangelog\n---------\n\nAvailable in [CHANGELOG](CHANGELOG).\n\nContributing\n------------\n\nPlease read carefully [CONTRIBUTING.md](CONTRIBUTING.md) before making a merge\nrequest.\n\nLicense and Author\n------------------\n\n- Author:: Samuel Bernard (<samuel.bernard@gmail.com>)\n\n```text\nCopyright (c) 2016 Sam4Mobile, 2017 Make.org\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
  "maintainer": "Make.org",
  "maintainer_email": "sre@make.org",
  "license": "Apache-2.0",
  "platforms": {
    "redhat": ">= 0.0.0",
    "centos": ">= 0.0.0",
    "scientific": ">= 0.0.0",
    "fedora": ">= 0.0.0",
    "debian": ">= 0.0.0",
    "ubuntu": ">= 0.0.0",
    "suse": ">= 0.0.0"
  },
  "dependencies": {

  },
  "providing": {

  },
  "attributes": {

  },
  "recipes": {

  },
  "version": "1.1.0",
  "source_url": "https://gitlab.com/chef-platform/dynamic-attributes",
  "issues_url": "https://gitlab.com/chef-platform/dynamic-attributes/issues",
  "privacy": false,
  "chef_versions": [
    [
      ">= 12.0"
    ]
  ],
  "ohai_versions": [

  ],
  "gems": [

  ]
}
