{"name":"cobbpass","version":"1.0.1","description":"Manages local alternative root recovery passwords","long_description":"cobbpass Cookbook\n=================\n\nThis cookbook creates a local user and applies a random password to it. The\nuser has root permissions and works as a fallback user.\n\nThe user password can be automatically changed every day or on every chef\nrun. This way if the remote user is unavailable (e.g. when a LDAP server\nis malfunctioning), the administrator can lookup the password and login\ninto the server.\n\nThe random password is stored using chef-vault, and only the actual node\nand the administrators can see the encrypted passwords inside it.\n\nRequirements\n============\n\nCookbooks\n---------\n\nThe following cookbooks are dependencies for this:\n\n* sudo - sets the root permissions for the user\n* chef-vault - for encrypting and storing passwords\n\nPlatform\n--------\n\nThe following platforms are supported and tested:\n\n* CentOS 6.7\n* CentOS 7.2\n\nChef Server\n-----------\n\nThe recommended chef version is at least >= 12.5\n\nDatabag setup\n=============\n\nCreate the data bag in which you will store the passwords:\n\n```bash\nknife data bag create cobbpass\n```\n\nClients (nodes) must be able to create, update and read databag items:\n\n```\nknife acl add group clients data cobbpass read,update,create\n```\n\nUsage\n=====\n\nTo use the cookbook, you can just add the `default` recipe to the run\\_list. It\nwill setup the user and its random password. By default, on every chef run, the\npassword will be changed.\n\nIf you don't want to change the password on every chef run, remove from the \nrun\\_list and add a cron entry to run only this recipe:\n\n```bash\nchef-client -o 'recipe[cobbpass]'\n```\n\nIt will create the vault item under `cobbpass/<node>` and the username on the\nserver will be `cobbpass`.\n\nCurrently, chef doesn't allow node clients to see user public keys, so we\ncan't specify any admin on the vault. Instead, we can create a _dummy_ client\nand and allow all other clients to see it:\n\n```bash\nknife client create cobbpass\nknife acl add group clients clients cobbpass read\nknife node create cobbpass\nknife acl add group clients nodes cobbpass read\n```\n\nThis way you can specify pseudo-admins using their clients names on the \nattribute.\n\nAttributes\n==========\n\nAttributes are documented on `attributes/default.rb` file. This way I don't need\nto duplicate definitions here and there :)\n\nLicense and Author\n==================\n\n- Author:: Hugo Cisneiros (<hugo.cisneiros@movile.com>)\n\nCopyright 2017, Movile\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n","maintainer":"Hugo Cisneiros (Eitch)","maintainer_email":"hugo.cisneiros@movile.com","license":"Apache 2.0","platforms":{"centos":">= 0.0.0","rhel":">= 0.0.0","amazon":">= 0.0.0","scientific":">= 0.0.0","oracle":">= 0.0.0"},"dependencies":{"sudo":">= 0.0.0","chef-vault":">= 0.0.0"},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{}}