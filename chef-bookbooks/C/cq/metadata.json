{"name":"cq","version":"1.1.1","description":"Installs and configures Adobe AEM (formerly CQ)","long_description":"# CQ/AEM Chef cookbook\n\nThis cookbook deploys and configures Adobe Experience Manager (AEM), formerly\nknown as CQ.\n\nFYI, it is not called `aem-coobkook`, because when I started development there\nwas no AEM yet (it was known as CQ at that time). Nowadays the `aem` name seems\nto be taken anyways, so I no longer have a choice.\n\n# Table of contents\n\n* [Supported platforms](#supported-platforms)\n    * [Operating systems](#operating-systems)\n    * [Chef versions](#chef-versions)\n    * [AEM/CQ versions](#aemcq-versions)\n* [Getting started](#getting-started)\n* [Attributes](#attributes)\n    * [default.rb](#defaultrb)\n    * [author.rb](#authorrb)\n    * [publish.rb](#publishrb)\n* [Recipes](#recipes)\n    * [default.rb](#defaultrb-1)\n    * [commons.rb](#commonsrb)\n    * [author.rb](#authorrb-1)\n    * [publish.rb](#publishrb-1)\n* [Custom resources](#custom-resources)\n    * [cq_package](#cq_package)\n        * [Actions](#actions)\n        * [Properties](#properties)\n        * [Usage](#usage)\n    * [cq_osgi_config](#cq_osgi_config)\n        * [Actions](#actions-1)\n        * [Properties](#properties-1)\n        * [Compatibility matrix](#compatibility-matrix)\n        * [Usage](#usage-1)\n            * [Regular OSGi configs](#regular-osgi-configs)\n            * [Factory OSGi configs](#factory-osgi-configs)\n    * [cq_osgi_bundle](#cq_osgi_bundle)\n        * [Actions](#actions-2)\n        * [Properties](#properties-2)\n        * [Usage](#usage-2)\n    * [cq_osgi_component](#cq_osgi_component)\n        * [Actions](#actions-3)\n        * [Properties](#properties-3)\n        * [Usage](#usage-3)\n    * [cq_user](#cq_user)\n        * [Actions](#actions-4)\n        * [Properties](#properties-4)\n        * [Compatibility matrix](#compatibility-matrix-1)\n        * [Usage](#usage-4)\n    * [cq_jcr](#cq_jcr)\n        * [Actions](#actions-5)\n        * [Properties](#properties-5)\n        * [Usage](#usage-5)\n* [Testing](#testing)\n* [Author](#author)\n\n# Supported platforms\n\n## Operating systems\n\n* CentOS/RHEL 6.x\n* CentOS/RHEL 7.x\n\n## Chef versions\n\n* Chef 12.x\n\n## AEM/CQ versions\n\n* AEM 6.1.0\n* AEM 6.2.0\n* AEM 6.3.0\n* AEM 6.4.0\n\n# Getting started\n\nTBD\n\n# Attributes\n\nFor default values please refer to appropriate files.\n\n## default.rb\n\n---\n\nTo set Java related attributes please refer to [java\ncookbook](https://github.com/agileorbit-cookbooks/java). By default it\ninstalls Oracle's JDK7.\n\n---\n\n<table>\n  <tr>\n    <th>Attribute</th>\n    <th>Type</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><tt>['cq']['user']</tt></td>\n    <td>String</td>\n    <td>System user for CQ/AEM</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['user_uid']</tt></td>\n    <td>String</td>\n    <td>UID of CQ/AEM user</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['user_comment']</tt></td>\n    <td>String</td>\n    <td>Comment/description of CQ/AEM user</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['user_shell']</tt></td>\n    <td>String</td>\n    <td>Default shell of CQ/AEM user</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['group']</tt></td>\n    <td>String</td>\n    <td>System group for CQ/AEM</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['group_gid']</tt></td>\n    <td>String</td>\n    <td>GID of CQ/AEM group</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['limits']['file_descriptors']</tt></td>\n    <td>String</td>\n    <td>Max number of open file descriptor for CQ/AEM user</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['base_dir']</tt></td>\n    <td>String</td>\n    <td>Base directory for CQ/AEM instance(s)</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['home_dir']</tt></td>\n    <td>String</td>\n    <td>Home directory under wich CQ/AEM instances are deployed</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['version']</tt></td>\n    <td>String</td>\n    <td>CQ/AEM version</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['custom_tmp_dir']</tt></td>\n    <td>String</td>\n    <td>Custom directory that JVM uses for temporary files</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['jar']['url']</tt></td>\n    <td>String</td>\n    <td>URL from which CQ/AEM JAR file is downloaded</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['jar']['checksum']</tt></td>\n    <td>String</td>\n    <td>SHA256 checksum of CQ/AEM JAR file</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['license']['url']</tt></td>\n    <td>String</td>\n    <td>URL from which CQ/AEM license is downloaded</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['license']['checksum']</tt></td>\n    <td>String</td>\n    <td>SHA256 checksum of CQ/AEM license file</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['service']['start_timeout']</tt></td>\n    <td>Fixnum</td>\n    <td>Max number of seconds to wait until CQ/AEM instance is fully\n    operational after service start</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['service']['kill_delay']</tt></td>\n    <td>Fixnum</td>\n    <td>Max number of seconds for greceful instance stop before kill signal is\n    sent to the process</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['service']['restart_sleep']</tt></td>\n    <td>Fixnum</td>\n    <td>Number of seconds to wait between service stop and start</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['init_template_cookbook']</tt></td>\n    <td>String</td>\n    <td>Cookbook which is a source for init script template</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['conf_template_cookbook']</tt></td>\n    <td>String</td>\n    <td>Cookbook which is a source for conf file template</td>\n  </tr>\n</table>\n\n## author.rb\n\nAll attributes in this file refer to CQ/AEM author instance (\n`['cq']['author']` namespace).\n\n<table>\n  <tr>\n    <th>Attribute</th>\n    <th>Type</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['run_mode']</tt></td>\n    <td>String</td>\n    <td>Instance run mode</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['port']</tt></td>\n    <td>String</td>\n    <td>Main port of CQ/AEM instance</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['jmx_ip']</tt></td>\n    <td>String</td>\n    <td>Value of <tt>-Djava.rmi.server.hostname</tt> JVM parameter. Requires\n    reference to <tt>${CQ_JMX_IP}</tt> shell variable in\n    <tt>['cq']['author']['jvm']['jmx_opts']</tt> attribute to be effective\n    </td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['jmx_port']</tt></td>\n    <td>String</td>\n    <td>Value of <tt>-Dcom.sun.management.jmxremote.port</tt> and/or\n    <tt>-Dcom.sun.management.jmxremote.rmi.port</tt> JVM parameters. Requires\n    reference to <tt>${CQ_JMX_PORT}</tt> shell variable in\n    <tt>['cq']['author']['jvm']['jmx_opts']</tt> attribute to be effective\n    </td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['debug_ip']</tt></td>\n    <td>String</td>\n    <td>IP to listen on with debug interface. Requires reference to\n    <tt>${CQ_DEBUG_IP}</tt> shell variable in\n    <tt>['cq']['author']['jvm']['debug_opts']</tt> attribute to be effective\n    </td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['debug_port']</tt></td>\n    <td>String</td>\n    <td>Port of JVM debug interface. Requires reference to\n    <tt>${CQ_DEBUG_PORT}</tt> shell variable in\n    <tt>['cq']['author']['jvm']['debug_opts']</tt> attribute to be effective\n    </td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['credentials']['login']</tt></td>\n    <td>String</td>\n    <td>User that's used to perform actions agains your CQ/AEM instance. The\n    most typical scenarios require <tt>admin</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['credentials']['password']</tt></td>\n    <td>String</td>\n    <td>Passowrd of user specified in\n    <tt>['cq']['author']['credentials']['login']</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['jvm']['min_heap']</tt></td>\n    <td>String</td>\n    <td>Number of megabytes that's passed on to <tt>-Xms</tt> JVM parameter\n    </td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['jvm']['max_heap']</tt></td>\n    <td>String</td>\n    <td>Number of megabytes that's passed on to <tt>-Xmx</tt> JVM parameter\n    </td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['jvm']['max_perm_size']</tt></td>\n    <td>String</td>\n    <td>Number of megabytes that's passed on to <tt>-XX:MaxPermSize</tt> JVM\n    parameter</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['jvm']['code_cache_size']</tt></td>\n    <td>String</td>\n    <td>Number of megabytes that's passed on to\n    <tt>-XX:ReservedCodeCacheSize</tt> JVM parameter</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['jvm']['general_opts']</tt></td>\n    <td>String</td>\n    <td>Generic JVM parameters</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['jvm']['code_cache_opts']</tt></td>\n    <td>String</td>\n    <td>JVM parameters related to its code cache</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['jvm']['gc_opts']</tt></td>\n    <td>String</td>\n    <td>JVM parameters related to garbage collection</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['jvm']['jmx_opts']</tt></td>\n    <td>String</td>\n    <td>JVM parameres related to JMX settings</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['jvm']['debug_opts']</tt></td>\n    <td>String</td>\n    <td>JVM parameters related to debug interface</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['jvm']['crx_opts']</tt></td>\n    <td>String</td>\n    <td>CRX related JVM parameters</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['jvm']['extra_opts']</tt></td>\n    <td>String</td>\n    <td>All other JVM patameters</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['healthcheck']['resource']</tt></td>\n    <td>String</td>\n    <td>Resource that's queried during instance start to determine whether\n    CQ/AEM is fully operational</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['author']['healthcheck']['response_code']</tt></td>\n    <td>String</td>\n    <td>Expected HTTP status code of healthcheck resource</td>\n  </tr>\n</table>\n\n## publish.rb\n\nAll attributes in this file refer to CQ/AEM publish instance (\n`['cq']['publish']` namespace).\n\n<table>\n  <tr>\n    <th>Attribute</th>\n    <th>Type</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['run_mode']</tt></td>\n    <td>String</td>\n    <td>Instance run mode</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['port']</tt></td>\n    <td>String</td>\n    <td>Main port of CQ/AEM instance</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['jmx_ip']</tt></td>\n    <td>String</td>\n    <td>Value of <tt>-Djava.rmi.server.hostname</tt> JVM parameter. Requires\n    reference to <tt>${CQ_JMX_IP}</tt> shell variable in\n    <tt>['cq']['publish']['jvm']['jmx_opts']</tt> attribute to be effective\n    </td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['jmx_port']</tt></td>\n    <td>String</td>\n    <td>Value of <tt>-Dcom.sun.management.jmxremote.port</tt> and/or\n    <tt>-Dcom.sun.management.jmxremote.rmi.port</tt> JVM parameters. Requires\n    reference to <tt>${CQ_JMX_PORT}</tt> shell variable in\n    <tt>['cq']['publish']['jvm']['jmx_opts']</tt> attribute to be effective\n    </td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['debug_ip']</tt></td>\n    <td>String</td>\n    <td>IP to listen on with debug interface. Requires reference to\n    <tt>${CQ_DEBUG_IP}</tt> shell variable in\n    <tt>['cq']['publish']['jvm']['debug_opts']</tt> attribute to be effective\n    </td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['debug_port']</tt></td>\n    <td>String</td>\n    <td>Port of JVM debug interface. Requires reference to\n    <tt>${CQ_DEBUG_PORT}</tt> shell variable in\n    <tt>['cq']['publish']['jvm']['debug_opts']</tt> attribute to be effective\n    </td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['credentials']['login']</tt></td>\n    <td>String</td>\n    <td>User that's used to perform actions agains your CQ/AEM instance. The\n    most typical scenarios require <tt>admin</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['credentials']['password']</tt></td>\n    <td>String</td>\n    <td>Passowrd of user specified in\n    <tt>['cq']['publish']['credentials']['login']</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['jvm']['min_heap']</tt></td>\n    <td>String</td>\n    <td>Number of megabytes that's passed on to <tt>-Xms</tt> JVM parameter\n    </td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['jvm']['max_heap']</tt></td>\n    <td>String</td>\n    <td>Number of megabytes that's passed on to <tt>-Xmx</tt> JVM parameter\n    </td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['jvm']['max_perm_size']</tt></td>\n    <td>String</td>\n    <td>Number of megabytes that's passed on to <tt>-XX:MaxPermSize</tt> JVM\n    parameter</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['jvm']['code_cache_size']</tt></td>\n    <td>String</td>\n    <td>Number of megabytes that's passed on to\n    <tt>-XX:ReservedCodeCacheSize</tt> JVM parameter</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['jvm']['general_opts']</tt></td>\n    <td>String</td>\n    <td>Generic JVM parameters</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['jvm']['code_cache_opts']</tt></td>\n    <td>String</td>\n    <td>JVM parameters related to its code cache</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['jvm']['gc_opts']</tt></td>\n    <td>String</td>\n    <td>JVM parameters related to garbage collection</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['jvm']['jmx_opts']</tt></td>\n    <td>String</td>\n    <td>JVM parameres related to JMX settings</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['jvm']['debug_opts']</tt></td>\n    <td>String</td>\n    <td>JVM parameters related to debug interface</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['jvm']['crx_opts']</tt></td>\n    <td>String</td>\n    <td>CRX related JVM parameters</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['jvm']['extra_opts']</tt></td>\n    <td>String</td>\n    <td>All other JVM patameters</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['healthcheck']['resource']</tt></td>\n    <td>String</td>\n    <td>Resource that's queried during instance start to determine whether\n    CQ/AEM is fully operational</td>\n  </tr>\n  <tr>\n    <td><tt>['cq']['publish']['healthcheck']['response_code']</tt></td>\n    <td>String</td>\n    <td>Expected HTTP status code of healthcheck resource</td>\n  </tr>\n</table>\n\n# Recipes\n\n## default.rb\n\nInstalls core dependencies (Ruby gems and OS packages).\n\n## commons.rb\n\nTakes care of common elements of every CQ/AEM deployment, including:\n\n* system user and its configuration\n* required directory structure\n* Java installation\n* CQ Unix Toolkit installation\n\n## author.rb\n\nInstalls CQ/AEM author instance.\n\n## publish.rb\n\nInstalls CQ/AEM publish instance.\n\n# Custom resources\n\n---\n\nAll CQ/AEM related resource are idempotent, so action won't be taken if not\nrequired.\n\n---\n\n---\n\nWhenever you need to deploy 2 or more CQ/AEM instances on a single server\nplease make sure you named all your custom resources differently, as you may\nget unexpected results otherwise (i.e. when CQ/AEM restart is required\nafterwards). Please find `cq_package` example below:\n\n*Bad*:\n\n```ruby\ncq_package 'package1' do\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n\n  action :deploy\nend\n\ncq_package 'package1' do\n  instance \"http://localhost:#{node['cq']['publish']['port']}\"\n\n  action :deploy\nend\n```\n\n*Good*:\n\n```ruby\ncq_package 'Author: package1' do\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n\n  action :deploy\nend\n\ncq_package 'Publish: package1' do\n  instance \"http://localhost:#{node['cq']['publish']['port']}\"\n\n  action :deploy\nend\n```\n\n---\n\n## cq_package\n\nAllows for CRX package manipulation using CRX Package Manager API.\n\nKey features:\n\n* package specific details (name, group, version) are always extracted from ZIP\n  file (`/META-INF/vault/properties.xml`), so you don't have to define that\n  anywhere else. All you need is an URL to your package\n* `cq_package` identifies packages by name/group/version properties\n* packages are automatically downloaded from remote (`http://`, `https://`) or\n  local (`file://`) sources. If HTTP(S) source requires basic auth please use\n  `http_user` and `http_pass`\n* by default all packages are downloaded to Chef's cache (`/var/chef/cache`)\n* installation process is considered finished only when both \"foreground\"\n  (Package Manager) and \"background\" (OSGi bundle/component restarts) ones are\n  over - no more 'wait until you see X in `error.log`'\n\n### Actions\n\n---\n\nIf you'd like to upload and install a package, in most cases please use\n`deploy` action instead of combined `upload` and `install`. Detailed\nexplanation can be found below.\n\n---\n\n* `upload` - uploads package to given CQ instance\n* `install` - installs already uploaded package\n* `deploy` - uploads and installs given package as a single action. This action\n  is quicker than separate `upload` + `install` as less healthchecks have to be\n  executed\n* `uninstall` - uninstalls given CQ package\n* `delete` - deletes given CQ package\n\n### Properties\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Type</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><tt>name</tt></td>\n    <td>String</td>\n    <td>Package name. Can be anything as long as it means something to you.\n    Actual package name is extracted from provided ZIP file. Whenever you use\n    <tt>notifies</tt> on your package resource and more than a single action\n    was defined (i.e. <tt>action [:upload, :install]</tt>), two notifications\n    will be triggered (after <tt>:upload</tt> and <tt>:install</tt>\n    respectively)</td>\n  </tr>\n  <tr>\n    <td><tt>username</tt></td>\n    <td>String</td>\n    <td>Instance username</td>\n  </tr>\n  <tr>\n    <td><tt>password</tt></td>\n    <td>String</td>\n    <td>Instance password</td>\n  </tr>\n  <tr>\n    <td><tt>instance</tt></td>\n    <td>String</td>\n    <td>Instance URL</td>\n  </tr>\n  <tr>\n    <td><tt>source</tt></td>\n    <td>String</td>\n    <td>URL to ZIP package. Accepted protocols: <tt>file://</tt>,\n    <tt>http://</tt>, <tt>https://</tt></td>\n  </tr>\n  <tr>\n    <td><tt>http_user</tt></td>\n    <td>String</td>\n    <td>HTTP basic auth user. Use whenever <tt>source</tt> requires such\n    authentication</td>\n  </tr>\n  <tr>\n    <td><tt>http_pass</tt></td>\n    <td>String</td>\n    <td>HTTP basic auth password. Use whenever <tt>source</tt> requires such\n    authentication</td>\n  </tr>\n  <tr>\n    <td><tt>recursive_install</tt></td>\n    <td>Boolean</td>\n    <td>Whether to use recursive flag when installing packages (required for\n    service packs and some hotfixes). Applies only to install and deploy\n    actions</td>\n  </tr>\n  <tr>\n    <td><tt>rescue_mode</tt></td>\n    <td>Boolean</td>\n    <td>Some packages may cause shutdown of the entire OSGi because of\n    dependecy (i.e. cycle) or bundle priority issues. In such case after\n    package installation java process is still running, however the instance\n    is not responding over HTTP. After CQ/AEM restart everyting works\n    perfectly fine again.\n    This flag allows Chef to continue processing if it is not able to get OSGi\n    bundles state <tt>error_state_barrier</tt> times in a row.\n    In most (if not all) cases it should be combined with restart notification\n    (please see examples below).\n    It is highly discouraged to use this property, as 99% of CRX packages\n    shouldn't require such configuration. Unfortunately that 1% does. This is\n    rather a safety switch than a common pattern that should be used in every\n    single case.\n    Applies only to install and deploy actions.</td>\n  </tr>\n  <tr>\n    <td><tt>checksum</tt></td>\n    <td>String</td>\n    <td>ZIP file checksum (passed through to <tt>remote_file</tt> resource\n    that is used under the hood by <tt>cq_package</tt> provider)</td>\n  </tr>\n  <tr>\n    <td><tt>same_state_barrier</tt></td>\n    <td>Integer</td>\n    <td>How many times in a row the same OSGi state should occur after package\n    (un)installation to consider this process successful. Default is 6</td>\n  </tr>\n  <tr>\n    <td><tt>error_state_barrier</tt></td>\n    <td>Integer</td>\n    <td>How many times in a row the OSGi console was unavailable after package\n    (un)installation. Useful only when combined with <tt>rescue_mode</tt>. By\n    default set to 6</td>\n  </tr>\n  <tr>\n    <td><tt>max_attempts</tt></td>\n    <td>Integer</td>\n    <td>Number of attempts while waiting for stable OSGi state after package\n    (un)installation. Set to 30 by default</td>\n  </tr>\n  <tr>\n    <td><tt>sleep_time</tt></td>\n    <td>Integer</td>\n    <td>Sleep time between OSGi status checks (in seconds) after package\n    (un)installation. Set to 10 by default</td>\n  </tr>\n</table>\n\n### Usage\n\n```ruby\ncq_package 'Slice 4.2.1' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  source 'https://oss.sonatype.org/content/groups/public/com/cognifide/slice'\\\n    '/slice-assembly/4.2.1/slice-assembly-4.2.1-cq.zip'\n\n  action :upload\nend\n\ncq_package 'Upgrade to Oak 1.0.13' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  source 'https://artifacts.example.com/aem/6.0.0/hotfixes'\\\n    '/cq-6.0.0-hotfix-6316-1.1.zip'\n  http_user 'john'\n  http_pass 'passw0rd'\n\n  action :upload\nend\n\ncq_package 'ACS AEM Commons 1.10.2' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  source 'https://github.com/Adobe-Consulting-Services/acs-aem-commons'\\\n    '/releases/download/acs-aem-commons-1.10.2'\\\n    '/acs-aem-commons-content-1.10.2.zip'\n\n  action [:upload, :install]\nend\n\ncq_package 'AEM6 hotfix 6316' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  source node['cq']['packages']['aem6']['hf6316']\n  recursive_install true\n\n  action :deploy\n\n  notifies :restart, 'service[cq60-author]', :immediately\nend\n\ncq_package 'Geometrixx All' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  source \"http://localhost:#{node['cq']['author']['port']}/etc/packages\"\\\n    '/day/cq60/product/cq-geometrixx-all-pkg-5.7.476.zip'\n  http_user node['cq']['author']['credentials']['login']\n  http_pass node['cq']['author']['credentials']['password']\n\n  action :uninstall\nend\n\ncq_package 'Not really well-thought-out package' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  source node['cq']['packages']['myapp']\n  http_user node['cq']['author']['credentials']['login']\n  http_pass node['cq']['author']['credentials']['password']\n  rescue_mode true\n\n  action :deploy\n\n  notifies :restart, 'service[cq60-author]', :immediately\nend\n\ncq_package 'Author: Service Pack 2 (upload)' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  source node['cq']['packages']['aem6']['sp2']\n\n  action :upload\nend\n\ncq_package 'Author: Service Pack 2 (install)' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  source node['cq']['packages']['aem6']['sp2']\n  recursive_install true\n  rescue_mode true\n  same_state_barrier 12\n  error_state_barrier 12\n  max_attempts 36\n\n  action :install\n\n  notifies :restart, 'service[cq60-author]', :immediately\nend\n```\n\nFirst `cq_package` resource will download Slice package from provided URL and\nupload it to defined AEM Author instance.\n\nSecond resource does the same as the first one, but for Oak 1.0.13 hotfix. The\nonly difference is that provided URL requires basic auth, hence the `http_user`\nand `http_pass` properties.\n\nThird package shows how to combine multiple actions in a single `cq_package`\nresource usage.\n\n4th `cq_package` presents how to use `deploy` action that combines both\n`upload` and `install` in a single execution. This is preferred way of doing\npackage deployment, in particular for those that require AEM service restart\nas soon as installation is completed. `recursive_install` was also used here,\nwhich is required for majority of hotfixes and every service pack.\n\nNext example describes usage of `uninstall` action. In this particular case\noperation was executed against Geometrixx package.\n\n6th `cq_package` presents usage of `rescue_mode` property. Imagine that this\npackage provides new OSGi bundles and right after its installation some serious\nissue occurs (i.e. unresolvable OSGi dependency, conflict or cycle). As a\nresult of this event all bundles will be turned off and effectively instance\nwill stop responding or start serving 404s for all resources (including\n`/system/console`). The java process though will still be running. The only\nsolution to that problem is AEM restart, after which all work perfectly fine\nagain. Without `rescue_mode` property `cq_package` provider will keep checking\nOSGi bundles to detect their stable state, but none of these attempts will end\nsuccessfully, as nothing is reachable over HTTP. Eventually Chef run will be\naborted. If `rescue_mode` was activated (set to `true`) then after\n`error_state_barrier` unsuccessful attempts an error will be printed and the\nprocessing will be continued (restart of `cq60-author` service in this case).\n\n7th & 8th `cq_package` resources explain how to deal with AEM instance\nrestarts after package installation and tune post installation OSGi\nstability checks.\n\nMoreover it explains how to use combination of `upload` and `install` instead\nof `deploy`. Such procedure might be required sometimes, i.e. when some extra\nsteps have to be done after package upload, but before its installation.\n\nPlease notice that both resources were named differently on purpose\nto avoid resource merge and 2 restarts. If you'd use:\n\n```ruby\ncq_package 'Author: Service Pack 2' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  source node['cq']['packages']['aem6']['sp2']\n  recursive_install true\n\n  action [:upload, :install]\n\n  notifies :restart, 'service[cq60-author]', :immediately\nend\n```\n\nor\n\n```ruby\ncq_package 'Author: Service Pack 2' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  source node['cq']['packages']['aem6']['sp2']\n\n  action :upload\nend\n\ncq_package 'Author: Service Pack 2' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  source node['cq']['packages']['aem6']['sp2']\n  recursive_install true\n\n  action :install\n\n  notifies :restart, 'service[cq60-author]', :immediately\nend\n```\n\ntwo restarts will be triggered.\n\nIn the first case during compile phase Chef will generate 2 resources with the\nsame name, but different actions.\n\nIn second example restart still will be triggered after upload, even if it's\nnot explicitly defined during 1st usage (upload action). The reason is quite\nsimple - both resources are named the same (`Author: Service Pack 2`) and Chef\nwill treat this as a single resource on resource collection. It means that\nnotify parameter will be silently merged to the resource with upload action\nduring compile phase.\n\n## cq_osgi_config\n\nProvides an interface for CRUD operations in OSGi configs.\n\n### Actions\n\nFor regular (non-factory, single instance) configs:\n\n* `create` - updates already existing configuration\n* `delete` - restores default settings of given OSGi config\n\nFor factory configs:\n\n* `create` - creates a new factory instance if none of existing ones match to\n  defined state\n* `delete` - deletes factory config instance if there's one that matches to\n  defined state\n\n\n### Properties\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Type</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><tt>pid</tt></td>\n    <td>String</td>\n    <td>Config name (PID). Relevant to regular configs only</td>\n  </tr>\n  <tr>\n    <td><tt>username</tt></td>\n    <td>String</td>\n    <td>Instance username</td>\n  </tr>\n  <tr>\n    <td><tt>password</tt></td>\n    <td>String</td>\n    <td>Instance password</td>\n  </tr>\n  <tr>\n    <td><tt>instance</tt></td>\n    <td>String</td>\n    <td>Instance URL</td>\n  </tr>\n  <tr>\n    <td><tt>factory_pid</tt></td>\n    <td>String</td>\n    <td>Factory PID</td>\n  </tr>\n  <tr>\n    <td><tt>properties</tt></td>\n    <td>Hash</td>\n    <td>Key-value pairs that represent OSGi config properties</td>\n  </tr>\n  <tr>\n    <td><tt>append</tt></td>\n    <td>Boolean</td>\n    <td>If set to <tt>true</tt> arrays will be merged. Use if you'd like to\n    specify just a subset of array elements. <tt>false</tt> by default. Has no\n    impact on other property types (String, Fixnum, etc)</td>\n  </tr>\n  <tr>\n    <td><tt>apply_all</tt></td>\n    <td>Boolean</td>\n    <td>If <tt>true</tt> all properties defined in a <tt>cq_osgi_config</tt>\n    resource will be used when applying OSGi configuration (despite of the fact\n    just a subset differs). Example: 5 properties were defined as\n    <tt>properties</tt>, 3 of them require update, but all of them will be set.\n    <tt>false</tt> by default\n    </td>\n  </tr>\n  <tr>\n    <td><tt>include_missing</tt></td>\n    <td>Boolean</td>\n    <td>Properties that were NOT defined by user, but exist in OSGi will be\n    included as a part of an update if this property is set to <tt>true</tt>\n    for regular OSGi configs. For factory configs it bahaves almost the same.\n    If new instance needs to be created then defaults defined in factory PID\n    will be used. In case of existing instance update, all missing properties\n    will be based on properties defined in that instance. This is\n    <b>recommended</b> property when you'd like to edit pre-existing factory\n    or regular configs. <tt>true</tt> by default</td>\n  </tr>\n  <tr>\n    <td><tt>unique_fields</tt></td>\n    <td>Array</td>\n    <td>Property names/keys that define uniqueness of given config. Applicable\n    to factory configs only. By deafult all available property keys will be\n    used (defined by factory config on AEM instance). User doesn't need to\n    define that at all, unless you want to cherry pick particular config. It's\n    generally <b>recommended</b> to specify this for every factory OSGi config.\n    Example: <tt>log.name</tt> key needs to stay unique for your config</td>\n  </tr>\n  <tr>\n    <td><tt>count</tt></td>\n    <td>Fixnum</td>\n    <td>Number of duplicated instances of given OSGi configuration. 1 by\n    default. Applicable to factory configs only. Useful when duplicated\n    instances are allowed, i.e. each instance specify some sort of a worker and\n    every single one of them has exactly the same set of properties\n    </td>\n  </tr>\n  <tr>\n    <td><tt>enforce_count</tt></td>\n    <td>Boolean</td>\n    <td>Reduces number of duplicated configs if more than <tt>count</tt> has\n    been found. Applicable to factory configs only. <tt>false</tt> by default\n    </td>\n  </tr>\n  <tr>\n    <td><tt>force</tt></td>\n    <td>Boolean</td>\n    <td>If <tt>true</tt>, defined OSGi config is deleted/updated reagrdless of\n    current settings. Applies to regular OSGi configs only. This violates\n    idempotence, so please use <tt>only_if</tt> or <tt>not_if</tt> blocks to\n    prevent constant execution</td>\n  </tr>\n  <tr>\n    <td><tt>rescue_mode</tt></td>\n    <td>Boolean</td>\n    <td>Some config operations may cause shutdown of the entire OSGi because of\n    dependecy (i.e. cycle) or bundle/component priority issues. In such case\n    after config update java process is still running, however the instance\n    is not responding over HTTP. After CQ/AEM restart everyting works\n    perfectly fine again.\n    This flag allows Chef to continue processing if it is not able to get OSGi\n    component state <tt>error_state_barrier</tt> times in a row.\n    In most (if not all) cases it should be combined with AEM restart\n    notification.\n    It is highly discouraged to use this property, as 99% of OSGi configs\n    shouldn't require such configuration. Unfortunately that 1% does. This is\n    rather a safety switch than a common pattern that should be used in every\n    single case.\n    </td>\n  </tr>\n  <tr>\n    <td><tt>same_state_barrier</tt></td>\n    <td>Integer</td>\n    <td>How many times in a row the same OSGi component state should occur\n    after configuration update to consider this process successful. 3 by\n    default</td>\n  </tr>\n  <tr>\n    <td><tt>error_state_barrier</tt></td>\n    <td>Integer</td>\n    <td>How many times in a row the OSGi console was unavailable after OSGi\n    config update. Useful only when combined with <tt>rescue_mode</tt>. 3 by\n    default</td>\n  </tr>\n  <tr>\n    <td><tt>max_attempts</tt></td>\n    <td>Integer</td>\n    <td>Number of attempts while waiting for stable OSGi state after OSGi\n    config update. 60 by default</td>\n  </tr>\n  <tr>\n    <td><tt>sleep_time</tt></td>\n    <td>Integer</td>\n    <td>Sleep time between OSGi component status checks (in seconds) after\n    config update. 2 by default</td>\n  </tr>\n</table>\n\n### Compatibility matrix\n\n| Property          | Regular OSGi config | Factory OSGi config |\n| ----------------- | ------------------- | ------------------- |\n| `pid`             | :white_check_mark:  | :white_check_mark:  |\n| `username`        | :white_check_mark:  | :white_check_mark:  |\n| `password`        | :white_check_mark:  | :white_check_mark:  |\n| `instance`        | :white_check_mark:  | :white_check_mark:  |\n| `factory_pid`     | :x:                 | :white_check_mark:  |\n| `properties`      | :white_check_mark:  | :white_check_mark:  |\n| `append`          | :white_check_mark:  | :white_check_mark:  |\n| `apply_all`       | :white_check_mark:  | :white_check_mark:  |\n| `include_missing` | :white_check_mark:  | :white_check_mark:  |\n| `unique_fields`   | :x:                 | :white_check_mark:  |\n| `count`           | :x:                 | :white_check_mark:  |\n| `enforce_count`   | :x:                 | :white_check_mark:  |\n| `force`           | :white_check_mark:  | :x:                 |\n\n### Usage\n\n#### Regular OSGi configs\n\n```ruby\ncq_osgi_config 'Root Mapping' do\n  pid 'com.day.cq.commons.servlets.RootMappingServlet'\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  properties('rootmapping.target' => '/welcome.html')\n\n  action :create\nend\n\ncq_osgi_config 'Event Admin' do\n  pid 'org.apache.felix.eventadmin.impl.EventAdmin'\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  append true\n  properties(\n    'org.apache.felix.eventadmin.IgnoreTimeout' => ['com.example*']\n  )\n\n  action :create\nend\n\ncq_osgi_config 'OAuth Twitter' do\n  pid 'com.adobe.granite.auth.oauth.impl.TwitterProviderImpl'\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  properties(\n    'oauth.provider.id' => 'twitter'\n  )\n\n  action :delete\nend\n\ncq_osgi_config 'Promotion Manager' do\n  pid 'com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl'\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  force true\n\n  action :delete\nend\n```\n\n`Root Mapping` resource sets `/` redirect to `/welcome.html` if it's not\nalready set.\n\n`Event Admin` merges defined properties with the ones that are already set\n(because of `append` property). This is how `Event Admin` will look like\nbefore:\n\n| ID                                         | VALUE |\n| ------------------------------------------ | ----- |\n| org.apache.felix.eventadmin.ThreadPoolSize | 20    |\n| org.apache.felix.eventadmin.Timeout        | 5000  |\n| org.apache.felix.eventadmin.RequireTopic   | true  |\n| org.apache.felix.eventadmin.IgnoreTimeout  | [\"org.apache.felix\\*\",\"com.adobe\\*\"] |\n\nand after Chef run:\n\n| ID                                         | VALUE |\n| ------------------------------------------ | ----- |\n| org.apache.felix.eventadmin.ThreadPoolSize | 20    |\n| org.apache.felix.eventadmin.Timeout        | 5000  |\n| org.apache.felix.eventadmin.RequireTopic   | true  |\n| org.apache.felix.eventadmin.IgnoreTimeout  | [\"com.adobe\\*\",\"com.example\\*\",\"org.apache.felix\\*\"] |\n\nProperties of `OAuth Twitter` will be restored to default values if any of them\nwas previously modified (explicitly set).\n\n`Promotion Manager` will behave as `OAuth Twitter` with one exception - it will\nhappen on every Chef run due to `force` property.\n\n#### Factory OSGi configs\n\n```ruby\ncq_osgi_config 'Custom Logger' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  factory_pid 'org.apache.sling.commons.log.LogManager.factory.config'\n  properties(\n    'org.apache.sling.commons.log.level' => 'error',\n    'org.apache.sling.commons.log.file' => 'logs/custom.log',\n    'org.apache.sling.commons.log.pattern' =>\n      '{0,date,dd.MM.yyyy HH:mm:ss.SSS} *{4}* [{2}] {3} {5}',\n    'org.apache.sling.commons.log.names' => [\n      'com.example.custom1',\n      'com.example.custom2'\n    ]\n  )\n  unique_fields ['org.apache.sling.commons.log.file']\n\n  action :create\nend\n\ncq_osgi_config 'Job Queue' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  factory_pid 'org.apache.sling.event.jobs.QueueConfiguration'\n  properties(\n    'queue.name' => 'Granite Workflow Timeout Queue',\n    'queue.type' => 'TOPIC_ROUND_ROBIN',\n    'queue.topics' => ['com/adobe/granite/workflow/timeout/job'],\n    'queue.maxparallel' => -1,\n    'queue.retries' => 10,\n    'queue.retrydelay' => 2000,\n    'queue.priority' => 'MIN',\n    'service.ranking' => 0\n  )\n  unique_fields ['queue.name']\n\n  action :delete\nend\n\n```\n\n`Custom Logger` resource will create a new logger according to defined\nproperties. `org.apache.sling.commons.log.file` is a virtual identifier of\ngiven OSGi config instance (specified by user). If instance with such \"ID\"\nalready exists nothing happens. Otherwise a brand new configuration will be\ncreated.\nPlease keep in mind that there's no need to specify any UUID in resource definition.\n\n\n`Job Queue` resource will delete factory instance of\n`org.apache.sling.event.jobs.QueueConfiguration` that has `queue.name` set to\n`Granite Workflow Timeout Queue`. Presence of additional properties doesn't\nmatter in this case and will be completely ignored.\n\n# cq_osgi_bundle\n\nAdds ability to stop and start OSGi bundles\n\n## Actions\n\n* `stop` - stop given OSGi bundle if it is in `Active` state\n* `start` - starts defined bundle, but only when it's in `Resolved` state\n\n## Properties\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Type</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><tt>symbolic_name</tt></td>\n    <td>String</td>\n    <td>Symbolic name of the bundle, i.e. <tt>com.company.example.abc</tt>. If\n    not explicitly defined resource name will be used as symbolic name</td>\n  </tr>\n  <tr>\n    <td><tt>username</tt></td>\n    <td>String</td>\n    <td>Instance username</td>\n  </tr>\n  <tr>\n    <td><tt>password</tt></td>\n    <td>String</td>\n    <td>Instance password</td>\n  </tr>\n  <tr>\n    <td><tt>instance</tt></td>\n    <td>String</td>\n    <td>Instance URL</td>\n  </tr>\n  <tr>\n    <td><tt>rescue_mode</tt></td>\n    <td>Boolean</td>\n    <td>Same meaning as for <tt>cq_package</tt></td>\n  </tr>\n  <tr>\n    <td><tt>same_state_barrier</tt></td>\n    <td>Integer</td>\n    <td>Same meaning as for <tt>cq_package</tt></td>\n  </tr>\n  <tr>\n    <td><tt>error_state_barrier</tt></td>\n    <td>Integer</td>\n    <td>Same meaning as for <tt>cq_package</tt></td>\n  </tr>\n  <tr>\n    <td><tt>max_attempts</tt></td>\n    <td>Integer</td>\n    <td>Same meaning as for <tt>cq_package</tt></td>\n  </tr>\n  <tr>\n    <td><tt>sleep_time</tt></td>\n    <td>Integer</td>\n    <td>Same meaning as for <tt>cq_package</tt></td>\n  </tr>\n</table>\n\n## Usage\n\n```ruby\ncq_osgi_bundle 'Author: org.eclipse.equinox.region' do\n  symbolic_name 'org.eclipse.equinox.region'\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  same_state_barrier 3\n  sleep_time 5\n\n  action :stop\nend\n\ncq_osgi_bundle 'com.adobe.xmp.worker.files.native.fragment.linux' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n\n  action :start\nend\n```\n\nFirst example stops `org.eclipse.equinox.region` AEM author instance. Since\nthere's just a few dependencies on this bundle, number of post-stop checks\nhave been limited, as there's no point to wait for so long.\n\nSecond instance of `cq_osgi_bundle` is fairly simple, as it just starts\n`com.adobe.xmp.worker.files.native.fragment.linux` bundle.\n\n# cq_osgi_component\n\nManagement of OSGi components\n\n## Actions\n\n* `enable` - enable given OSGi component\n* `disable` - disable defined OSGi component\n\n## Properties\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Type</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><tt>pid</tt></td>\n    <td>String</td>\n    <td>Component PID</td>\n  </tr>\n  <tr>\n    <td><tt>username</tt></td>\n    <td>String</td>\n    <td>Instance username</td>\n  </tr>\n  <tr>\n    <td><tt>password</tt></td>\n    <td>String</td>\n    <td>Instance password</td>\n  </tr>\n  <tr>\n    <td><tt>instance</tt></td>\n    <td>String</td>\n    <td>Instance URL</td>\n  </tr>\n</table>\n\n## Usage\n\n```ruby\ncq_osgi_component 'Author: com.example.my.component' do\n  pid 'com.example.my.component'\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n\n  action :enable\nend\n\ncq_osgi_component 'Author: com.project.email.servlet' do\n  pid 'com.project.email.servlet'\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n\n  action :disable\nend\n```\n\nBoth examples are self-explanatory. First one enables\n`com.example.my.component` component if it's in `disabled` state. Second one\nwill disable `com.project.email.servlet` component, but only if it's state is\nnot already `disabled`.\n\n---\n\nPlease keep in mind that OSGi components used to get back to their original\nstate after AEM instance restart. So if you disabled one, most probably it'll\nbecome enabled after instance restart.\n\n---\n\n# cq_user\n\nExposes a resource for CQ/AEM user management. Supports:\n\n* password updates\n* profile updates (e-mail, job title, etc)\n* status updates (activate/deactivate given user)\n\n## Actions\n\n* `modify` - use to modify an existing user. Action will be skipped if given\n  user does not exist\n\n## Properties\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Type</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><tt>id</tt></td>\n    <td>String</td>\n    <td>User ID (login)</td>\n  </tr>\n  <tr>\n    <td><tt>username</tt></td>\n    <td>String</td>\n    <td>Instance username</td>\n  </tr>\n  <tr>\n    <td><tt>password</tt></td>\n    <td>String</td>\n    <td>Instance password</td>\n  </tr>\n  <tr>\n    <td><tt>instance</tt></td>\n    <td>String</td>\n    <td>Instance URL</td>\n  </tr>\n  <tr>\n    <td><tt>email</tt></td>\n    <td>String</td>\n    <td>E-mail</td>\n  </tr>\n  <tr>\n    <td><tt>first_name</tt></td>\n    <td>String</td>\n    <td>First name</td>\n  </tr>\n  <tr>\n    <td><tt>last_name</tt></td>\n    <td>String</td>\n    <td>Last name</td>\n  </tr>\n  <tr>\n    <td><tt>phone_number</tt></td>\n    <td>String</td>\n    <td>Phone number</td>\n  </tr>\n  <tr>\n    <td><tt>job_title</tt></td>\n    <td>String</td>\n    <td>Job title</td>\n  </tr>\n  <tr>\n    <td><tt>street</tt></td>\n    <td>String</td>\n    <td>Street</td>\n  </tr>\n  <tr>\n    <td><tt>mobile</tt></td>\n    <td>String</td>\n    <td>Mobile</td>\n  </tr>\n  <tr>\n    <td><tt>city</tt></td>\n    <td>String</td>\n    <td>City</td>\n  </tr>\n  <tr>\n    <td><tt>postal_code</tt></td>\n    <td>String</td>\n    <td>Postal code</td>\n  </tr>\n  <tr>\n    <td><tt>country</tt></td>\n    <td>String</td>\n    <td>Country</td>\n  </tr>\n  <tr>\n    <td><tt>state</tt></td>\n    <td>String</td>\n    <td>State</td>\n  </tr>\n  <tr>\n    <td><tt>gender</tt></td>\n    <td>String</td>\n    <td>Gender</td>\n  </tr>\n  <tr>\n    <td><tt>about</tt></td>\n    <td>String</td>\n    <td>About section</td>\n  </tr>\n  <tr>\n    <td><tt>user_password</tt></td>\n    <td>String</td>\n    <td>Desired password for non-admin user specified by <tt>id</tt>\n    property</td>\n  </tr>\n  <tr>\n    <td><tt>enabled</tt></td>\n    <td>Boolean</td>\n    <td>True by default, set to false to deactive given user. Has no effect\n    for admin user</td>\n  </tr>\n  <tr>\n    <td><tt>old_password</tt></td>\n    <td>String</td>\n    <td>Old password of admin user. Has no effect for non-admin ones</td>\n  </tr>\n</table>\n\n## Compatibility matrix\n\n| Property        | `admin` user        | All other users    |\n| --------------- | ------------------- | ------------------ |\n| `id`            | :white_check_mark:  | :white_check_mark: |\n| `username`      | :white_check_mark:  | :white_check_mark: |\n| `password`      | :white_check_mark:  | :white_check_mark: |\n| `instance`      | :white_check_mark:  | :white_check_mark: |\n| `email`         | :white_check_mark:  | :white_check_mark: |\n| `first_name`    | :white_check_mark:  | :white_check_mark: |\n| `last_name`     | :white_check_mark:  | :white_check_mark: |\n| `phone_number`  | :white_check_mark:  | :white_check_mark: |\n| `job_title`     | :white_check_mark:  | :white_check_mark: |\n| `street`        | :white_check_mark:  | :white_check_mark: |\n| `mobile`        | :white_check_mark:  | :white_check_mark: |\n| `city`          | :white_check_mark:  | :white_check_mark: |\n| `postal_code`   | :white_check_mark:  | :white_check_mark: |\n| `country`       | :white_check_mark:  | :white_check_mark: |\n| `state`         | :white_check_mark:  | :white_check_mark: |\n| `gender`        | :white_check_mark:  | :white_check_mark: |\n| `about`         | :white_check_mark:  | :white_check_mark: |\n| `user_password` | :x:                 | :white_check_mark: |\n| `enabled`       | :x:                 | :white_check_mark: |\n| `old_password`  | :white_check_mark:  | :x:                |\n\n## Usage\n\n```ruby\ncq_user 'admin' do\n  username node['cq']['author']['credentials']['login']\n  password 'd4rk_kn1ght'\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n\n  first_name 'Bruce'\n  last_name 'Wayne'\n  old_password 'passw0rd'\n\n  action :modify\nend\n\ncq_user 'author' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n\n  first_name 'Peter'\n  last_name 'Parker'\n  job_title 'Spiderman'\n  gender 'male'\n  enabled false\n  user_password 'sp1d3r'\n\n  action :modify\nend\n```\n\nModify action on `cq_user 'admin'` resource will change CQ/AEM admin's password\nto `d4rk_kn1ght` if the current one is either `passw0rd` or `admin` (the latter\nis automatically checked if both `password` and `old_password` are incorrect).\nMoreover admin's first name and last name will be updated (to `Bruce` and\n`Wayne` respectively) if needed.\n\nSecond example (`cq_user 'author'`) also updates user password, but this time\nthe old one doesn't have to be specified, as this operation will be executed on\nadmin rights (auth credentials: `username`/`password`). Additionally `auhtor`'s\nprofile will be updated and user will be disabled (`enabled false`), so you\nwon't be able to log in as this user anymore.\n\n# cq_jcr\n\nCRUD operations on JCR nodes.\n\n## Actions\n\n* `create` - creates new node under given path if it doesn't exist. Otherwise\n  it modifies its properties if required\n* `delete` - deletes node if it exists. Prints error otherwise\n* `modify` - modifies properties of existing JCR node\n\n## Properties\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Type</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><tt>path</tt></td>\n    <td>String</td>\n    <td>Node path</td>\n  </tr>\n  <tr>\n    <td><tt>username</tt></td>\n    <td>String</td>\n    <td>Instance username</td>\n  </tr>\n  <tr>\n    <td><tt>password</tt></td>\n    <td>String</td>\n    <td>Instance password</td>\n  </tr>\n  <tr>\n    <td><tt>instance</tt></td>\n    <td>String</td>\n    <td>Instance URL</td>\n  </tr>\n  <tr>\n    <td><tt>properties</tt></td>\n    <td>Hash</td>\n    <td>Node properties</td>\n  </tr>\n  <tr>\n    <td><tt>append</tt></td>\n    <td>Boolean</td>\n    <td>By default set to <tt>true</tt>. If full overwrite of properties is\n    required please set <tt>append</tt> property to <tt>false</tt>. Applies\n    only to <tt>:create</tt> and <tt>:modify</tt> actions</td>\n  </tr>\n</table>\n\n## Usage\n\n```ruby\ncq_jcr '/content/test_node' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  properties(\n    'property_one' => 'first',\n    'property_two' => 'second',\n    'property_three' => ['item1', 'item2', 'item3']\n  )\n\n  action :create\nend\n\ncq_jcr '/content/geometrixx/en/products/jcr:content' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  append false\n  properties(\n    'jcr:primaryType' => 'cq:PageContent',\n    'jcr:title' => 'New title',\n    'subtitle' => 'New subtitle',\n    'new_property' => 'Random value'\n  )\n\n  action :create\nend\n\ncq_jcr '/content/dam/geometrixx-media/articles/en/2012' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n\n  action :delete\nend\n\ncq_jcr '/content/geometrixx/en/services/certification/jcr:content' do\n  username node['cq']['author']['credentials']['login']\n  password node['cq']['author']['credentials']['password']\n  instance \"http://localhost:#{node['cq']['author']['port']}\"\n  properties(\n    'jcr:title' => 'New Certification Services',\n    'brand_new_prop' => 'ValueX'\n  )\n\n  action :modify\nend\n```\n\nCreate action on `cq_jcr '/content/test_node'` will create such node with\ngiven properties if it doesn't exist yet. Otherwise its properties will be\nupdated if necessary. By default `append` is set to `true`, which means\nexisting properties of `/content/test_node` will stay untouched unless the same\nproperties are specified in your `cq_jcr` resource.\n\n2nd example sets `append` property to `false`, which means that all\nproperties except those specified in your resource should be removed. It will\nact as a full overwrite (keep in mind that some properties are protected and\ncan't be deleted, moreover Sling API automatically adds things like\n`jcr:createdBy`).\n\nNext example is very simple - `/content/dam/geometrixx-media/articles/en/2012`\nwill get deleted if it exists. Otherwise warning message will be printed.\n\nLast `cq_jcr` resource uses `:modify` action. It applies updates to existing\nnodes only. If specified path does not exist warning message will be\ndisplayed.\n\n# Testing\n\nTBD\n\n# Author\n\nJakub Wadolowski (<jakub.wadolowski@cognifide.com>)\n","maintainer":"Jakub Wadolowski","maintainer_email":"jakub.wadolowski@cognifide.com","license":"Apache-2.0","platforms":{"centos":"~> 7.0","redhat":"~> 7.0"},"dependencies":{"java":">= 0.0.0","ulimit":">= 0.0.0","cq-unix-toolkit":"~> 1.3.0"},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{},"source_url":"https://github.com/jwadolowski/cookbook-cq","issues_url":"https://github.com/jwadolowski/cookbook-cq/issues","chef_version":[["< 15",">= 13"]],"ohai_version":[]}