# $Id: Generated by chef for node: <%= node['hostname'] %>
# --------------------------------------------------------------
# NOTE: This file is controlled by chef templates!
#   Do not edit or change this file but change the following:
#    * template file: <%= @template_file %>
#    * recipe file: <%= @recipe_file %>
# --------------------------------------------------------------

def dependency_versions(ast)
  raise_unless_xpath!(ast)

  # String literals.
  #
  #     depends 'foo'
  depends = ast.xpath(%q{//command[ident/@value='depends']})

  # Loop through all literal depends and make a hash with names and versions
  deps = Hash.new
  depends.each do |dep|
    name = dep.xpath(%q{descendant::args_add/descendant::tstring_content[1]})
    version = dep.xpath(%q{descendant::args_add/descendant::tstring_content[2]})
    deps[name] = version unless name.to_s == ''
  end

  # Quoted word arrays are also common.
  #
  #     %w{foo bar baz}.each do |cbk|
  #       depends cbk
  #     end
  depends = word_list_values(ast, "//command[ident/@value='depends']")

  # Loop through all word array depends and add them to the 'deps' hash
  depends.each do |dep|
    name = dep
    deps[name] = ''
  end

  # Return the generated 'deps' hash
  deps
end

def depends_on_specific_version?(version)
  version.to_s != '' && /^(?:= )?\d+\.\d+\.\d+$/ === version.xpath(%q{@value}).to_s
end

rule 'CG001', 'Ensure all cookbook dependencies depend on a specific version' do
  tags %w(correctness metadata)
  metadata do |ast|
    matches = []
    name = ast.xpath(%q{//command[ident/@value='name']})

    if name.to_s.match('<%= @matches %>')
      dependency_versions(ast).each do |name,version|
        matches << name unless depends_on_specific_version?(version)
      end
    end
    matches
  end
end
