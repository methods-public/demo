#! <%= `which sh`.chomp! %>
### BEGIN INIT INFO
# Provides:          <%= @daemon_name %>
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: <%= @daemon_name %>
# Description:       init script for <%= @daemon_name %>
#                    
### END INIT INFO

# Author: Alexey Melezhik <melezhik@gmail.org>
#

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script

APPLICATION_USER=<%= @application_user %>
APPLICATION_HOME=<%= @application_home %>

NAME="<%= @daemon_name %>"
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="<%= @application_desc %>"
DAEMON="<%= @daemon_path %>"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=<%= @install_dir %>/$NAME

<% app_env = Array.new -%>
<% app_opt = Array.new -%>
<% app_opt << "-s #{@server}" -%>
<% app_opt << "--listen #{@socket}" -%>
<% app_opt << "-E #{@plackup_environment}" -%>
<% app_opt << "-a " << ( Pathname.new(@application_script).relative? ?  (Pathname.new(@application_home + "/")  + Pathname.new(@application_script)).to_s : @application_script ) -%>
<% if ! @proc_manager.nil? && ! @proc_manager.empty? && @server == 'FCGI' -%>
    <% app_opt << "--manager #{@proc_manager}" -%>
<% end -%>
<% if ! @loader.nil? && ! @loader.empty?  -%>
    <% app_opt << "--loader #{@loader}" -%>
<% end -%>
<% if ! @proc_title.nil? && ! @proc_title.empty? -%>
    <% app_opt <<  "--proc_title #{@proc_title}" -%>
<% end -%>
<% if ! @mount.nil? && ! @mount.empty? -%>
    <% app_opt <<  "--path #{@mount}" -%>
<% else -%>
    <% app_opt <<  "--path /" -%>
<% end -%>
<% if ! @nproc.nil? && @server == 'FCGI' -%>
    <% app_opt << "--nproc #{@nproc}" -%>
<% elsif ! @nproc.nil? && @server == 'Starman' -%>
    <% app_opt << "--workers #{@nproc}" -%>
<% end -%>
<% if ! @backlog.nil? && @server == 'FCGI' -%>
    <% app_opt << "--backlog #{@backlog}" -%>
<% end -%>
<% if @server == 'Twiggy' %>
    <% app_env << "TWIGGY_DEBUG=#{@debug}" -%>
<% end -%>
<% if @operator == 'Catalyst' %>
    <% app_env << "CATALYST_CONFIG=#{@config}" -%>
    <% app_env << "CATALYST_DEBUG=#{@debug}" -%>
<% elsif @operator == 'Dancer' -%>
    <% app_env << "DANCER_CONFDIR=#{@application_home}" -%>
<% elsif @operator == 'Jifty' -%>
    <%- app_env << "JIFTY_CONFIG=#{@config}" -%>
<% end -%>
<% @envvars.each do |k,v| -%>
    <% app_env << "#{k}='#{v}'" -%>
<% end -%>
<% unless @perl5lib.empty? -%>
    <% app_env << "PERL5LIB=$PERL5LIB:#{@perl5lib.join(':')}" -%>
<% end -%>


# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
    <%= app_env.join ' ' %> start-stop-daemon -m --pidfile $PIDFILE --chuid $APPLICATION_USER -b -d $APPLICATION_HOME --start --test --startas $DAEMON -- <%= app_opt.join ' ' %> || return 1
    <%= app_env.join ' ' %> start-stop-daemon -m --pidfile $PIDFILE --chuid $APPLICATION_USER -b -d $APPLICATION_HOME --start --startas $DAEMON -- <%= app_opt.join ' ' %> || return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --signal 15 --retry 5 --quiet --pidfile $PIDFILE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc -p $PIDFILE "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
