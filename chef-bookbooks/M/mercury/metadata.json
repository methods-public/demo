{
  "name": "mercury",
  "description": "Installs/Configures mercury",
  "long_description": "[![Build Status](https://travis-ci.org/sbp-cookbooks/mercury.svg?branch=master)](https://travis-ci.org/sbp-cookbooks/mercury)\n\n# Mercury Global Loadbalancer Cookbook\n\nInstalls and configures Mercury Global Loadbalancer.\n\n## What is Mercury?\n\nMercury is a Global loadbalancer, designed to add a dns based loadbalancing layer on top of its internal loadbalancer or 3rd pary loadbalancers such as cloud services\nThis makes mercury able to loadbalance across multiple cloud environments using dns, while keeping existing cloud loadbancer sollutions in place\n\n* Source: https://github.com/schubergphilis/mercury\n* Binaries: https://github.com/schubergphilis/mercury/releases\n* Docs: http://mercury-global-loadbalancer.readthedocs.io/en/latest/\n\n## Requirements\n\n- Chef 12.5+\n\n### Platforms\n\n- RHEL 6+, CentOS6+\n- RHEL 7+, CentOS7+\n\n## Documentation\n\n### Install\n\nInclude the default recipe\n\n### Configuration items\n\n```\ndefault['mercury']['settings'] = {\n    manage_network_interfaces: \"(yes|no)\" -- allow mercury to add vip's to the network interfaces (default: yes) - required for internal proxy or for haproxy who does not add vip's\n\tenable_proxy: \"(yes|no)\"\t-- use internal proxy for loadbalancing (default: yes) - not needed for external proxy programs, or dns only setup\n}\n\ndefault['mercury']['logging'] = {\n\tlevel: \"(debug|info|warn|error)\" -- log level\n\toutput: \"(stdout|file)\"\t-- log output\n}\n\ndefault['mercury']['cluster'] = {\n\tname: \"\" -- cluster group name\n\tbinding: \"myhost\" -- ip/interface to bind on, also acts as cluster name\n    settings: {\n\t\tconnection_timeout: 10, -- connection timeout for cluster nodes\n  \t\tconnection_retry_count: 10, -- connection retry for cluster nodes\n  \t\tconnection_retry_interval: 10, -- connection retry interval for cluster nodes\n  \t\tping_interval: 10, -- ping interval for cluster nodes\n  \t\tping_timeout: 10, -- time to wait for reply before discarding cluster node\n  \t\tport: 9000, -- port for cluster communications\n  \t\ttls: { -- see tls settings below for more details\n\t\t\tinsecureskipverify: true\n\t\t}\n\t},\n    nodes: [\n\t\t{\n\t\t\tsearch: \"recipe:chef_recipe\", -- let chef find the remote nodes based on search\n\t\t\tport: 80 -- connect to port 80 of this node\n\t\t},\n\t]\n}\n\n\ndefault['mercury']['dns'] = {\n\tbinding: 'myhost' -- ip to bind on\n  \tport: 53 -- port to listen on for dns queries\n  \tallowed_requests: [ \"A\", \"AAAA\" ] -- what records to respond to (default is to allow most requests)\n}\n\ndefault['mercury']['web'] = {\n\tbinding: 'myhost' -- ip to bind on\n\tport: 9001 -- port to listen to for web interface\n\ttls: { -- see tls settings below\n\t}\n  auth: {\n    password: {\n      \"username\": \"sha256hashOfPassword\"\n    }\n    ldap: {\n      host: 'ldaphost' -- ldap host to connect to\n      port: 389 -- ldap port to connect to, 389 for tls, 636 for ssl\n      method: 'tls' -- method of connection, tls or ssl\n      binddn: \"OU=Users,DC=example,DC=com\" -- search path to find users\n      filter: \"(&(objectClass=organizationalPerson)(uid=%s))\" -- filter path to find user\n      domain: 'example' -- domain to prepend to ldap login\n    }\n  }\n}\n\ndefault['mercury']['loadbalancer']['pools'] = {\n\t'poolname' => { -- name of the pool/vip\n\t\tlistener: {\n\t\t\tip: \"\"  -- ip of the vip\n\t\t\tport: 0  -- port of the vip\n\t\t\tmode: \"(udp|tcp|http|https)\" -- what protocol to listen to\n\t\t\ttls: { -- see mercury src/tlsconfig/tls.go for all available options, not supplying this will use defaults\n\t\t\t\tminversion: 'VersionTLS12', -- minimum version of TLS to allow\n  \t\t\t\tciphersuites: %w(TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384), -- ciphersuite to allow\n  \t\t\t\tcurvepreferences: %w(CurveP521) -- curve preference to use\n\t\t\t}\n            readtimeout: 0 -- time to wait for http request from client (0 = unlimited, 10 = default)\n            writetimeout: 0 -- time to wait for server reply towards client (0 = unlimited, 0 = default)\n            ocspstapling: true|false -- enables ocsp stapling (true = default)\n\t\t},\n  \t\toutboundacls: [\n    \t\t{\n\t\t\t\taction: '(add|remove|replace)', -- what to do with header\n\t\t\t\theader_key: 'Location', -- header key to do action with\n\t\t\t\theader_value: 'https://###REQ_HOST######REQ_PATH###'  -- header value to set - not required on remove\n\t\t\t},\n    \t\t{\n\t\t\t\taction: '(add|remove|replace)', -- what to do with cookie\n  \t\t\t\tcookie_key: 'stky', -- cookie key to do action with\n\t\t\t\tcookie_value: '###NODE_ID###', -- calculated variable or string\n\t\t\t\tcookie_expire: '24h', -- time for cookie (ex. 1m, 3s, 24h)\n\t\t\t\tcookie_secure: true, -- secure\n\t\t\t\tcookie_httponly: true -- httponly\n\t\t\t},\n\t\t],\n  \t\tinboundacls: [\n    \t\t-- see outboundacls, but actions can also include allow/deny on inbound acls\n    \t\t{\n\t\t\t\taction: '(allow|deny)', -- what to do with cidr\n\t\t\t\tcidrs: [\"127.0.0.1/8\", \"10.0.0.0/8\"] -- network cidrs to apply action to\n            },\n    \t\t{\n\t\t\t\taction: '(add|remove|replace)', -- what to do with header\n\t\t\t\theader_key: 'Location', -- header key to do action with\n\t\t\t\theader_value: 'https://###REQ_HOST######REQ_PATH###'  -- header value to set - not required on remove\n            },\n    \t\t{\n\t\t\t\taction: '(allow|deny)', -- what to do with header (regex are allowed to allow/deny rules)\n\t\t\t\theader_key: 'User-Agent', -- header key to do action with\n                header_value: \".*Macintash.*\" -- value regex match for allow/denies are allowed\n\t\t\t},\n\t\t],\n        errorpage: {\n            file: \"/var/mercury/sorry.html\" -- specifying a sorry page, enables showing this on errors\n            trigger_threshold: 500 -- http result code when to show sorry page (e.g. 500 will show the sorrypage on all errors of 500+)\n        },\n\t\thealthchecks: [{ // >= mercury version 0.10 - allows an array of healthchecks on a Pool\n\t\t\ttype: '(httpget|httppost|tcpconnect|icmpping|udpping|tcpping)',\n            ip: '1.2.3.4',\n            pingpackets: 4,\n            pingtimeout: 1\n\t\t}],\n\t    backends: {\n\t\t\t'backendname' => {\n\t\t\t\tinboundacls: [] -- see earlier inbound acls\n\t\t\t\toutboundacls: [] -- see earlier inbound acls\n\t\t\t\thostnames: [\"\"] -- hostnames to repply on with this backend\n\t\t\t\tdnsentry: {\n\t\t\t\t\thostname: \"www\" -- hostname to give dns record for\n\t\t\t\t\tdomain: \"domain.org\" -- domain where this host subsides\n\t\t\t\t\tip: \"\" -- IPv4 of the vip to supply on dns record (will use listener ip above if this is not specified\n\t\t\t\t\tip6: \"\" -- IPv6 of the vip to supply on dns record (will use listener ip above if this is not specified\n\t\t\t\t},\n\t\t\t\thealthcheck: { // <= mercury version 0.9.x - allows only a single healthcheck\n\t\t\t\t\ttype: '(httpget|httppost|tcpconnect)',\n\t\t\t\t\thttpstatus: 200,\n\t\t\t\t\thttpheaders: ['Content-Type: application/soap+xml; charset=utf-8'],\n\t\t\t\t\tpostdata: '<your post body>',\n\t\t\t\t\trequest: \"http://www.domain.org/\",\n\t\t\t\t\ttls: {\n\t\t\t\t\t\tinsecureskipverify: true\n\t\t\t\t\t}\n\t\t\t\t},\n                healthcheckmode: \"(any|all)\" -- default: \"all\" - should 1 or all checks be ok for backend to be online\n\t\t\t\thealthchecks: [{ // >= mercury version 0.10 - allows an array of healthchecks\n\t\t\t\t\ttype: '(httpget|httppost|tcpconnect)',\n\t\t\t\t\thttpstatus: 200,\n\t\t\t\t\thttpheaders: ['Content-Type: application/soap+xml; charset=utf-8'],\n\t\t\t\t\tpostdata: '<your post body>',\n\t\t\t\t\trequest: \"http://www.domain.org/\",\n\t\t\t\t\ttls: {\n\t\t\t\t\t\tinsecureskipverify: true\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\tbalance: {\n\t\t\t\t\tmethod: 'topology,leastconnected' -- see loadbalancing methods for more details\n\t\t\t\t\tlocal_topology: \"site\" -- see networks below\n\t\t\t\t\tpreference: 0123 -- priority for preference based loadbalancing (lower has higher preference)\n                    active_passive: \"(yes|no)\" -- default: no - affects monitoring: to only alert if 0 or >1 nodes are online\n                    clusternodes: int -- default: #cluster_nodes - affects monitoring: usefull for vips that only live on 1 cluster node\n\t\t\t\t}\n\t\t\t\tnodes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tsearch: \"recipe:chef_recipe\", -- let chef find the remote nodes based on search\n\t\t\t\t\t\tport: 80 -- connect to port 80 of this node\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\thost: '1.2.3.4' -- specify host/ip\n\t\t\t\t\t\tport: 80 -- connect to port 80 of this node\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tconnectmode: \"(udp|tcp|http|https)\", -- what protocol to connect to the backend with\n\t\t\t}\n\t\t}\n\n\t}\n}\n\ndefault['mercury']['loadbalancer']['networks'] = { -- used for topology loadbalancing\n\t'site' => {\n\t\tcidrs = [ \"127.0.0.1/32\" ]\n\t}\n}\n\ndefault['mercury']['dns']['domains']['domain.org'] = { -- local dns records, also uses TTL as default for loadbalanced records\n\t'ttl' => 10, -- default ttl for all records\n\t'soa' => { -- standard soa record\n  \t\tname: 'mydomain.org',\n  \t\tns: \"ns.mydomain.org\",\n  \t\temail: \"hostmaster.mydomain.org\",\n  \t\trefresh: 30, # time that a slave will refresh from master\n  \t\tretry: 30, # retry time if slave failed to connect to master\n  \t\texpire: 3600, # cache on slave\n  \t\tminimum: 10, # minimum cache time for slave\n\t},\n\t'records' => [\t\t-- records that are not loadbalanced but local\n\t\t{\t\t\t\n\t\t\tname: \"\"\t-- for domain records no name needed\n\t\t\ttarget: \"10 mymx.domain.org\" -- mx server to send to\n\t\t\ttype: \"MX\"\t -- MX record type\n\t\t},\n\t\t{\n\t\t\tname: \"www2\" -- hostname in domain record\n\t\t\ttarget: \"::1\" -- target\n\t\t\ttype: \"AAAA\" -- ipv6 record\n\t\t}\n\t]\n}\n\ndefault['mercury']['dns']['allow_forwarding'] = [ \"10.10.0.177/32\", \"::1/128\" ] -- allows recursive dns queries for given clients (used when setting mercury as dns forwarding server)\n```\n\n### Loadbalancing Methods\n\n* leastconnected - based on current clients connected\n\n* leasttraffic -- based on traffic generated\n\n* preference -- based on preference set in node of backend\n\n* responsetime -- based on responsetime of a backend node (first byte response? or http roundtrip?)\n\n* random -- rng\n\n* roundrobin -- try to switch them a bit\n\n* sticky -- based on the 'stky' cooky which contains the node, requires the following 2 acls:\n\n    ```json\n{ action: 'replace', cookie_key: 'stky', cookie_value: '###NODE_ID###', cookie_expire: '24h', cookie_secure: true, cookie_httponly: true, cookie_path: '/' },\n{ action: 'add', cookie_key: 'stky', cookie_value: '###NODE_ID###', cookie_expire: '24h', cookie_secure: true, cookie_httponly: true, cookie_path: '/' },\n    ```\n\n      note that for stickyness in combination with global loadbalancing, you need to ```add each node to all loadbalancers```. so that the lb can always forward the client to its previous node\n\n* topology -- based on topology network set, requires the network to be set\n\n* firstavailable -- used for compatibility reasons, this ensures that we always return only the first record, and prevents multiple hosts in dns responses.\n\n#### Loadbalancing Performance\nWhen selecting multiple loadbalance options, keep in mind the speed of each of them.\nSee below a benchmark of the speeds.\n```\n$ go test -bench=.\n\n  BenchmarkBalancerLeastConnected-4     10000000           160 ns/op\n  BenchmarkBalancerLeastTraffic-4       10000000           167 ns/op\n  BenchmarkBalancerPreference-4         10000000           163 ns/op\n  BenchmarkBalancerRandom-4               200000          9643 ns/op\n  BenchmarkBalancerRoundRobin-4          5000000           165 ns/op\n  BenchmarkBalancerSticky-4             10000000           124 ns/op\n  BenchmarkBalancerTopology-4            2000000           837 ns/op\n  BenchmarkBalancerResponseTime-4       10000000           136 ns/op\n```\n\n### TLS Settings\n\nTLS settings should be set on the Mercury Cluster and Webservices. But they can be set on Listeners and Backend.\nSetting TLS settings only on backends and not on a listener means that SNI will be used to identify a site for the given SSL certificate.\n\ntls: {\n    minversion: minimal tls version to allow\n  \tciphersuites: cipersuites to allo\n  \tcurvepreferences: curve preference to use\n\tinsecureskipverify: allow a client to connect to insecure SSL certificate (hostname mismatches)\n\n    certificatefile: certificate crt file to use - this should be a path to a file\n    certificatekey: certificate key file to use - this should be a path to a file\n    databagname: name of the databag to find the SSL certificate\n    databagitem: item name of the databag to find the SSL certificate\n\n}\n\n#### TLS Min version\nThe minimum TLS version to allow.\n\nOptions:\n* VersionSSL30,\n* VersionTLS10,\n* VersionTLS11,\n* VersionTLS12,\n\n#### TLS Cypher suites\nThe allowed Cypers, see https://golang.org/pkg/crypto/tls/#pkg-constants for details\n\nOptions:\n* TLS_RSA_WITH_RC4_128_SHA\n* TLS_RSA_WITH_3DES_EDE_CBC_SHA\n* TLS_RSA_WITH_AES_128_CBC_SHA\n* TLS_RSA_WITH_AES_256_CBC_SHA\n* TLS_RSA_WITH_AES_128_CBC_SHA256\n* TLS_RSA_WITH_AES_128_GCM_SHA256\n* TLS_RSA_WITH_AES_256_GCM_SHA384\n* TLS_ECDHE_ECDSA_WITH_RC4_128_SHA\n* TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n* TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n* TLS_ECDHE_RSA_WITH_RC4_128_SHA\n* TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\n* TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n* TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n* TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n* TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n* TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n* TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n* TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n* TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n* TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\n* TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\n* TLS_FALLBACK_SCSV\n\n#### TLS Recommended Cyphers and HTTP/2:\n\n* TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 <- has to be first if you want HTTP/2 support!\n\nThe 4 cipers below are need for the best SSL-Labs certificate but do not support HTTP/2, the HTTP/2 one will slightly downgrade your score\n* TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n* TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n* TLS_RSA_WITH_AES_256_GCM_SHA384\n* TLS_RSA_WITH_AES_256_CBC_SHA\n\n#### TLS Curve preferences\nThe tls curve preferences, see https://golang.org/pkg/crypto/tls/#pkg-constants for details\n\nOptions:\n* CurveP256\n* CurveP384\n* CurveP521\n* X25519\n\n### SSL Certificates\nYou can use databags to load the certificate, or let them be generated.\n\n#### Automaticly generated certificates\nIf you supply only the file names on where to find the certificates, the cookbook will generate these certificates and used them in Mercury\nExample:\n```\ntls: {\n    certificatefile: \"my_certificate.crt\"\n    certificatekey: \"my_certificate.key\"\n}\n```\n\nThis wil generate the certificates in the OS default's SSL certificate path, and genrate certificates with the name my_certificate.crt + my_certificate.key\n\n\n#### Databag controlled certificates\nIf you supply a databagname, the cookbook will search the databag for the keys provided as file name in the databagitem\nExample:\n```\ntls: {\n    databagname: 'mercury'\n    databagitem: 'certifactes_production'\n    certificatefile: \"my_certificate_file\"\n    certificatekey: \"my_certificate_key\"\n}\n```\n\nThis will get the certificate from the data bag called 'mercury' with the item 'certificates_production', and search for the keys 'my_certificate_file' and 'my_certificate_key'\nThe data bag will look something like this:\n```\n$ knife data bag show mercury certificates_aroductionp --secret-file secrey_key  -Fj\n\n{\n  \"id\": \"certificates_production\",\n   \"my_certificate_file\": \"-----BEGIN CERTIFICATE-----\\nMII...\\n..aNZ\\n-----END CERTIFICATE-----\"\n}\n```\n\n\n### Examples\n\nBelow You can find some example configurations\n\n#### HTTPS VIP example\nSimple site, that serves a website using SSL offloading - we allow SSL connects, and use HTTP connects to the backend\n```\ndefault['mercury']['loadbalancer']['pools']['my_backend_https'] = {\n  listener: { ip: 'myapp_vip', port: 443, mode: 'https' },\n  backends: {\n    'myapp_backend' => {\n      hostnames: [\"myapp.mydomain.org\"],\n      dnsentry: { hostname: 'myapp', domain: 'mydomain.org' },\n      healthcheck: { type: 'httpget', httpstatus: 200, request: \"http://myapp.mydomain.org/\" },\n      balance: { method: 'sticky,roundrobin' },\n      nodes: [{ search: \"recipe:myapp.mydomain.org AND chef_environment:#{node.chef_environment}\", port: 80 }],\n      connectmode: 'http'\n    }\n  }\n}\n```\n\nThis will accept connections on 'myapp_vip', which will do a chef search for the nodes serving this application\n\n#### HTTP -> HTTPS redirect example\nall requests on this ip on port 80 are redirected to their original domain and path to https://\n```\ndefault['mercury']['loadbalancer']['pools']['http_redirect'] = {\n  listener: { ip: matrix_ip['backend'], port: 80, mode: 'http' },\n  outboundacls: [\n    { action: 'add', header_key: 'Location', header_value: 'https://###REQ_HOST######REQ_PATH###' },\n    { action: 'add', status_code: 301 }\n  ],\n  backends: {\n    'redirect' => {\n      hostnames: ['default'],\n      connectmode: 'internal'\n    }\n  }\n}\n```\n\n#### HTTP redirect only as default to main website\nonly requests to myapp.mydomain.org are served, all other requests are redirected to https://myapp.mydomain.org\nalso we only allow private networks to connect to this site\n```\ndefault['mercury']['loadbalancer']['pools']['my_backend_https'] = {\n  listener: { ip: 'myapp_vip', port: 443, mode: 'https' },\n  backends: {\n    'myapp_backend' => {\n      hostnames: [\"myapp.mydomain.org\"],\n      dnsentry: { hostname: 'myapp', domain: 'mydomain.org' },\n      healthcheck: { type: 'httpget', httpstatus: 200, request: \"http://myapp.mydomain.org/\" },\n      balance: { method: 'sticky,roundrobin' },\n      nodes: [{ search: \"recipe:myapp.mydomain.org AND chef_environment:#{node.chef_environment}\", port: 80 }],\n      connectmode: 'http'\n    },\n    'redirect' => {\n      outboundacls: [\n        { action: 'add', header_key: 'Location', header_value: 'https://myapp.mydomain.org' },\n        { action: 'add', status_code: 301 }\n      ],\n      inboundacls: [\n        { action: 'allow', cidrs: [\"127.0.0.1/8\", \"10.0.0.0/8\"] }\n      ],\n      hostnames: ['default'],\n      connectmode: 'internal'\n    }\n  }\n}\n```\n\n#### HTTP serve site on all domains\nall requests to this ip/port serve this website\n```\ndefault['mercury']['loadbalancer']['pools']['my_backend_https'] = {\n  listener: { ip: 'myapp_vip', port: 443, mode: 'https' },\n  backends: {\n    'myapp_backend' => {\n      hostnames: [\"default\"],\n      dnsentry: { hostname: 'myapp', domain: 'mydomain.org' },\n      healthcheck: { type: 'httpget', httpstatus: 200, request: \"http://myapp.mydomain.org/\" },\n      balance: { method: 'sticky,roundrobin' },\n      nodes: [{ search: \"recipe:myapp.mydomain.org AND chef_environment:#{node.chef_environment}\", port: 80 }],\n      connectmode: 'http'\n    }\n  }\n}\n```\n\n## Reload and Config updates\n\nA reload should be enough to apply config changes. but some changes will affect clients.\n\nOnly when changing the Listener variables of a config, or the TLS config of backends, requires the proxy part of the laodbalancer for this specific Pool to be reloaded.\nAs such, when changing the IP, port, Connection mode or TLS config, clients currently connected to this pool will be disconnected, and can reconnect once the pool is up again. (mater of miliseconds)\n\nAll other configuration items are changable without interruption to the client.\n\n## Error/Sorrypage handling\n\nWhen a error page is set in the config, it will always show on internal errors (no backend available, or acl allow/deny)\nFor errors given by a webserver you can use the `trigger_threshold` which will only trigger errors if the status code is equal or higher.\n\nIf you do not want the sorry page to show on return codes from the webserver, then set this to a higher number then the http error codes (e.g. 600 or up)\n\n## ACLS\n\nACL's can be set to add/replace/modify headers, or to allow/deny requests based on headers/cidr (see examples above)\nto use ALLOW/DENY, you must use the `INBOUND` acl. you cannot mix allow and deny ACL's together, this will result in only the allow beeing processed.\n\n## License & Authors\n\n- Author:: Ronald Doorn ([rdoorn@schubergphilis.com](mailto:rdoorn@schubergphilis.com))\n\n```text\nCopyright:: Schuberg Philis\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
  "maintainer": "Schuberg Philis",
  "maintainer_email": "rdoorn@schubergphilis.com",
  "license": "Apache-2.0",
  "platforms": {
    "centos": ">= 0.0.0",
    "redhat": ">= 0.0.0"
  },
  "dependencies": {
    "ssl_certificate": "~> 2.1.0",
    "logrotate": "~> 2.1"
  },
  "providing": {

  },
  "attributes": {

  },
  "recipes": {

  },
  "version": "1.2.8",
  "source_url": "https://github.com/sbp-cookbooks/mercury",
  "issues_url": "https://github.com/sbp-cookbooks/mercury/issues",
  "privacy": false,
  "chef_versions": [
    [
      ">= 12.5"
    ]
  ],
  "ohai_versions": [

  ],
  "gems": [
    [
      "toml-rb",
      "= 1.0.0"
    ]
  ]
}
