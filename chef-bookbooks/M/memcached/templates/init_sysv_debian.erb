#! /bin/sh
### BEGIN INIT INFO
# Provides:          <%= @instance %>
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start and stop memcached instance <%= @instance %>
# Description:       The memcached daemon is a network memory cache service.
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Description of the service"
NAME=<%= @instance %>
DAEMON=<%= @binary_path %>
PIDFILE=/var/run/$NAME.pid
DAEMON_ARGS="<%= @cli_options %> -d -P $PIDFILE"
SCRIPTNAME=/etc/init.d/$NAME

ulimit -n <%= @ulimit %>

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 1

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
  touch $PIDFILE
  chown <%= @user %>:root $PIDFILE
  chmod 660 $PIDFILE
  start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
    || return 1
  start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
    $DAEMON_ARGS >> <%= @log_file %> 2>&1 \
    || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
  start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE --exec $DAEMON
  RETVAL="$?"
  rm -f $PIDFILE
  return "$RETVAL"
}

case "$1" in
  start)
  [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
  do_start
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  stop)
  [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  status)
  status_of_proc -p $PIDFILE && exit 0 || exit $?
  ;;
  restart|force-reload)
  log_daemon_msg "Restarting $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1 ;; # Old process is still running
      *) log_end_msg 1 ;; # Failed to start
    esac
    ;;
    *)
    # Failed to stop
    log_end_msg 1
    ;;
  esac
  ;;
  *)
  echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
  exit 3
  ;;
esac

:
