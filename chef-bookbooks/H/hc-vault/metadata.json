{"name":"hc-vault","version":"0.1.3","description":"Installs/Configures HashiCorp Vault","long_description":"hc-vault Cookbook\n=================\n\nThis cookbook sets up a HashiCorp Vault service.\n\n## Contents\n\n- [Requirements](#requirements)\n    - [platforms](#platforms)\n    - [packages](#packages)\n- [Attributes](#attributes)\n- [Usage](#usage)\n    - [Recipes](#recipes)\n        - [hc-vault::default](#hc-vaultdefault)\n        - [hc-vault::docker-compose](#hc-vaultdocker-compose)\n    - [Role Examples](#role-examples)\n    - [SSL server keys and certificates management by `ssl_cert` cookbook](#ssl-server-keys-and-certificates-management-by-ssl_cert-cookbook)\n- [License and Authors](#license-and-authors)\n\n## Requirements\n\n### platforms\n\n- Debian >= 9.0\n- Ubuntu >= 14.04\n- CentOS,RHEL >= 7.3\n\n### packages\n- none.\n\n## Attributes\n\n|Key|Type|Description, example|Default|\n|:--|:--|:--|:--|\n|`['hc-vault']['with_ssl_cert_cookbook']`|Boolean|If this attribute is true, `node['hc-vault']['docker-compose']['config']` are are overridden by the following `common_name` attributes.|`false`|\n|`['hc-vault']['ssl_cert']['common_name']`|String|Vault server common name for TLS|`node['fqdn']`|\n|`['hc-vault']['config']`|Hash|Vault configurations. This Hash is expanded to a `/vault/config/config.json` in Docker container.|See `attributes/default.rb`|\n|`['hc-vault']['docker-compose']['vault_owner']`|Integer|Vault owner UID (read only).|`100`|\n|`['hc-vault']['docker-compose']['vault_group']`|Integer|Vault group GID (read only).|`1000`|\n|`['hc-vault']['docker-compose']['app_dir']`|String||`\"#{node['docker-grid']['compose']['app_dir']}/vault\"`|\n|`['hc-vault']['docker-compose']['config_dir']`|String||`\"#{node['hc-vault']['docker-compose']['app_dir']}/config\"`|\n|`['hc-vault']['docker-compose']['file_dir']`|String|Default backend storage.|`\"#{node['hc-vault']['docker-compose']['app_dir']}/file\"`|\n|`['hc-vault']['docker-compose']['logs_dir']`|String||`\"#{node['hc-vault']['docker-compose']['app_dir']}/logs\"`|\n|`['hc-vault']['docker-compose']['certs_dir']`|String||`\"#{node['hc-vault']['docker-compose']['app_dir']}/certs\"`|\n|`['hc-vault']['docker-compose']['config']`|Hash|`docker-compose.yml` configurations.|See `attributes/default.rb`|\n\n## Usage\n\n### Recipes\n\n#### hc-vault::default\n\nThis recipe does nothing.\n\n#### hc-vault::docker-compose\n\nThis recipe generates a `docker-compose.yml` for the HashiCorp Vault service.\n\n### Role Examples\n\n- `roles/vault-on-docker.rb`\n\n```ruby\nname 'vault-on-docker'\ndescription 'Vault on Docker'\n\nvault_port = '8200'\n\nrun_list(\n  'role[docker]',\n  'recipe[hc-vault::docker-compose]',\n)\n\n#env_run_lists()\n\n#default_attributes()\n\noverride_attributes(\n  'docker-grid' => {\n    'engine' => {\n      'skip_setup' => false,\n    },\n    'compose' => {\n      'skip_setup' => false,\n    },\n  },\n  'hc-vault' => {\n    'config' => {\n      #'default_lease_ttl' => '768h',\n      #'max_lease_ttl' => '768h',\n    },\n    'docker-compose' => {\n      'config' => {\n        # Version 2 docker-compose format\n        'version' => '2',\n        'services' => {\n          'vault' => {\n            'ports' => [\n              \"#{vault_port}:8200\",\n            ],\n            #'volumes' => [\n              # These volumes will be set by the hc-vault::docker-compose recipe automatically.\n              #\"#{node['hc-vault']['docker-compose']['config_dir']}/config.json:/vault/config/config.json:ro\",\n              #\"#{node['hc-vault']['docker-compose']['file_dir']}:/vault/file:rw\",\n              #\"#{node['hc-vault']['docker-compose']['logs_dir']}:/vault/logs:rw\",\n            #],\n            'environment' => {\n              # use the ['hc-vault']['config'] attribute instead of this variable.\n              #'VAULT_LOCAL_CONFIG' => '',  # expanded to /vault/config/local.json\n            },\n          },\n        },\n      },\n    },\n  },\n)\n```\n\n- `roles/vault-with-ssl-on-docker.rb`\n\n```ruby\nname 'vault-with-ssl-on-docker'\ndescription 'Vault setup with ssl_cert cookbook'\n\nvault_cn = 'vault.io.example.com'\nvault_port = '8200'\n\nrun_list(\n  'role[docker]',\n  'recipe[hc-vault::docker-compose]',\n)\n\n#env_run_lists()\n\n#default_attributes()\n\noverride_attributes(\n  'docker-grid' => {\n    'engine' => {\n      'skip_setup' => false,\n    },\n    'compose' => {\n      'skip_setup' => false,\n    },\n  },\n  'ssl_cert' => {\n    #'common_names' => [\n    #  vault_cn,  # hc-vault cookbook < 0.1.3\n    #],\n  },\n  'hc-vault' => {\n    'with_ssl_cert_cookbook' => true,\n    'ssl_cert' => {\n      'common_name' => vault_cn,\n    },\n    'config' => {\n      'listener' => {\n        'tcp' => {\n          # These configurations will be set by the hc-vault::docker-compose recipe automatically.\n          #'tls_disable' => false\n          #'tls_cert_file' => '/vault/server.crt',\n          #'tls_key_file' => '/vault/server.key',\n        },\n      },\n      #'default_lease_ttl' => '768h',\n      #'max_lease_ttl' => '768h',\n    },\n    'docker-compose' => {\n      'config' => {\n        # Version 2 docker-compose format\n        'version' => '2',\n        'services' => {\n          'vault' => {\n            'ports' => [\n              \"#{vault_port}:8200\",\n            ],\n            #'volumes' => [\n              # These volumes will be set by the hc-vault::docker-compose recipe automatically.\n              #\"#{node['hc-vault']['docker-compose']['config_dir']}/config.json:/vault/config/config.json:ro\",\n              #\"#{node['hc-vault']['docker-compose']['file_dir']}:/vault/file:rw\",\n              #\"#{node['hc-vault']['docker-compose']['logs_dir']}:/vault/logs:rw\",\n              #\"#{server_cert_path(node['hc-vault']['ssl_cert']['common_name'])}:/vault/server.crt:ro\",\n              #\"#{node['hc-vault']['docker-compose']['certs_dir']}/server.key:/vault/server.key:ro\",\n            #],\n            'environment' => {\n              # use the ['hc-vault']['config'] attribute instead of this variable.\n              #'VAULT_LOCAL_CONFIG' => '',  # expanded to /vault/config/local.json\n            },\n          },\n        },\n      },\n    },\n  },\n)\n```\n\n### SSL server keys and certificates management by `ssl_cert` cookbook\n\n- create chef-vault items.\n\n```text\n$ ruby -rjson -e 'puts JSON.generate({\"private\" => File.read(\"vault.io.example.com.prod.key\")})' \\\n> > ~/tmp/vault.io.example.com.prod.key.json\n\n$ ruby -rjson -e 'puts JSON.generate({\"public\" => File.read(\"vault.io.example.com.prod.crt\")})' \\\n> > ~/tmp/vault.io.example.com.prod.crt.json\n\n$ cd $CHEF_REPO\n\n$ knife vault create ssl_server_keys vault.io.example.com.prod \\\n> --json ~/tmp/vault.io.example.com.prod.key.json\n\n$ knife vault create ssl_server_certs vault.io.example.com.prod \\\n> --json ~/tmp/vault.io.example.com.prod.crt.json\n```\n\n- grant reference permission to the Vault host\n\n```text\n$ knife vault update ssl_server_keys  vault.io.example.com.prod -S 'name:vault-host.example.com'\n$ knife vault update ssl_server_certs vault.io.example.com.prod -S 'name:vault-host.example.com'\n```\n\n- modify run_list and attributes\n\n```ruby\nrun_list(\n  'recipe[hc-vault::docker-compose]',\n)\n\noverride_attributes(\n  'ssl_cert' => {\n    #'common_names' => [\n    #  'vault.io.example.com',  # hc-vault cookbook < 0.1.3\n    #],\n  },\n  'hc-vault' => {\n    'with_ssl_cert_cookbook' => true,\n    'ssl_cert' => {\n      'common_name' => 'vault.io.example.com',\n    },\n    # ...\n  },\n)\n```\n\n## License and Authors\n\n- Author:: whitestar at osdn.jp\n\n```text\nCopyright 2017, whitestar\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n","maintainer":"whitestar","maintainer_email":"","license":"Apache 2.0","platforms":{"centos":">= 7.0","redhat":">= 7.0","debian":">= 8.0","ubuntu":">= 14.04"},"dependencies":{"docker-grid":">= 0.4.0","platform_utils":">= 0.4.4","ssl_cert":">= 0.3.9"},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{},"source_url":"http://scm.osdn.jp/gitroot/metasearch/grid-chef-repo.git","issues_url":"https://osdn.jp/projects/metasearch/ticket","chef_version":[[">= 12"]],"ohai_version":[]}