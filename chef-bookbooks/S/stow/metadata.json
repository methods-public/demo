{"name":"stow","version":"2.0.0","description":"Installs GNU Stow & provides stow_package resource","long_description":"# stow (Chef cookbook)\n\n[![Cookbook Version](https://img.shields.io/cookbook/v/stow.svg)][supermarket]\n[![Build Status](https://img.shields.io/travis/stevenhaddox/cookbook-stow.svg)][travis]\n[![Code Climate](https://codeclimate.com/github/stevenhaddox/cookbook-stow/badges/gpa.svg)][codeclimate]\n\n## Description\n\nA simple chef cookbook to install [GNU stow](https://www.gnu.org/software/stow/)\nvia package management or source if a package is not available.\n\n## Attributes\n\n* `['stow']['path'] = '/usr/local/stow'`\n  path stow command uses for symlinking packages and libraries\n* `['stow']['target'] = nil`\n  target directory for stow managed symlinks, defaults to stow path's parent directory if nil\n* `['stow']['version'] = '2.2.0'`\n  version of stow to install for source installations\n* `['stow']['src_url'] = 'http://ftp.gnu.org/gnu/stow/stow-2.2.0.tar.gz'`\n  URL for latest stow source tarball\n* `['stow']['rpm_url'] = nil # 'http://dl.fedoraproject.org/pub/epel/6/i386/stow-2.2.0-1.el6.noarch.rpm'`\n  Default is nil and uses yum, but you can specify an alternative rpm package by URL\n* `['stow']['deb_url'] = nil # 'http://mirrors.kernel.org/ubuntu/pool/universe/s/stow/stow_2.2.0-2_all.deb'`\n  Default is nil and uses apt, but you can specify an alternative deb package by URL\n* `['stow']['profile.d']['mode'] = nil`\n  Default is nill which will set permissions to the default system level\n\n## Usage\n\nAdd the recipes to the `run_list`, it should probably be towards the beginning:\n\n    \"recipe[stow]\"\n\nConfigure attributes:\n\n    \"stow\" : {\n      \"path\" : \"/opt/local/stow\",\n      \"version\" : \"2.2.0\"\n    }\n\n## Resources Provided\n\nThe stow cookbook provides a `stow_package` resource that can be used as follows:\n\n```ruby\nstow_package 'openssl' do\n  name    'openssl'\n  version '1.0.2d'\n  creates 'bin/openssl' # *Required* relative path to a file your source compiled package creates\n  #action :stow # Also available `:destow`, the default action is `:stow`\n  #destow_existing true # Defaults to `true` and will destow all out of date packages with prefix \"#{name}-+-\"\n  #current_version '1.0.2c' # Destows `current_version` before `version` is stowed; ignored unless `destow_existing` is `false`\nend\n```\n\n*NOTE*: This cookbook expects you to compile your packages with the following prefix convention:  \n`#{node['stow']['path']}/#{package_name}-+-#{version}/`\n\nFor the example above, you would compile `openssl` with the prefix:  \n`--prefix #{node['stow']['path']}/openssl-+-1.0.2d/`\n\nIf your package / library works with the [tar cookbook][tar] there's a very easy way to do this, like so:\n\n```ruby\n# Compile your package via the tar cookbook with proper prefix\ntar_package \"#{tarball_path_or_url}\" do\n  prefix \"#{node['stow']['path']}/#{your_pkg_name}-+-#{your_pkg_version}\"\n  creates \"#{node['stow']['path']}/#{your_pkg_name}-+-#{your_pkg_version}/#{path/to/pkg/file}\"\nend\n\n# Stow your package\nstow_package \"#{your_pkg_name}\" do\n  name    \"#{your_pkg_name}\"\n  version \"#{your_pkg_version}\"\n  creates 'path/to/pkg/file' # Note the relative path vs full path for `tar_package`\nend\n```\n\n## ChefSpec Matchers\n\nA set of ChefSpec matchers is included, for unit testing with ChefSpec. To illustrate:\n\n```ruby\n# Recipe code\nstow_package 'openssl' do\n  name    'openssl'\n  version '1.0.2d'\n  creates 'bin/openssl'\nend\n```\n\n```ruby\n# Spec code\nit 'should stow openssl version 1.0.2d' do\n  expect(chef_run).to stow_package('openssl').with(\n    name:    'openssl',\n    version: '1.0.2d',\n    creates: 'bin/openssl'\n  )\n  # Stow package wraps the execute resource if you want further validation\n  expect(chef_run).to run_execute('stow_openssl-1.0.2d')\nend\n```\n\nA matcher for the delete action is also available:\n\n```ruby\n# Recipe code\nstow_package 'openssl' do\n  action  :destow\n  name    'openssl'\n  version '1.0.2c'\n  creates 'bin/openssl'\nend\n```\n\n```ruby\n# Spec code\nit 'should destow package openssl 1.0.2c' do\n  expect(chef_run).to destow_package('openssl').with(\n    action:  :destow,\n    name:    'openssl',\n    version: '1.0.2c',\n    creates: 'bin/openssl'\n  )\n  # Stow package wraps the execute resource if you want further validation\n  expect(chef_run).to run_execute('destow_openssl-1.0.2c')\nend\n```\n\n[supermarket]: https://supermarket.getchef.com/cookbooks/stow\n[travis]: http://travis-ci.org/stevenhaddox/cookbook-stow\n[codeclimate]: https://codeclimate.com/github/stevenhaddox/cookbook-stow\n[tar]: https://supermarket.chef.io/cookbooks/tar\n","maintainer":"Steven Haddox","maintainer_email":"steven.haddox@gmail.com","license":"MIT","platforms":{"centos":">= 0.0.0","fedora":">= 0.0.0","redhat":">= 0.0.0","debian":">= 0.0.0","ubuntu":">= 0.0.0","scientific":">= 0.0.0"},"dependencies":{"apt":">= 0.0.0","build-essential":">= 0.0.0","tar":">= 0.0.0","yum-epel":">= 0.0.0"},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{"stow::default":"Install GNU stow via package or source (if needed)","stow::source":"Install GNU stow via source installation"}}