#!/bin/sh
### BEGIN INIT INFO
# Provides:          ziproxy
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Init script for ziproxy
# Description:       This is the init script for ziproxy.
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/bin/ziproxy
NAME=ziproxy
DESC=ziproxy
CONFIG_DIR=/etc/ziproxy

test -x $DAEMON || exit 0

DODTIME=1                   # Time to wait for the server to die, in seconds
                            # If this value is set too low you might not
                            # let some servers to die gracefully and
                            # 'restart' will not work

if [ ! -d /var/run ]; then
        mkdir -p /var/run
fi

# Include ziproxy defaults if available
if [ -f /etc/default/ziproxy ] ; then
        . /etc/default/ziproxy
fi
DAEMON_OPTS="$DAEMON_OPTS -d -p $PIDFILE"

set -e

running_pid() {
    # Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
    # Is this the expected child?
    ##[ "$cmd" != "$name" ] &&  return 1
    [ "$cmd" != "$name" ] &&  return 1
    return 0
}

running() {
# Check if the process is running looking at /proc
# (works for all users)
#    PIDFILE=/var/run/$NAME.pid
    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    # Obtain the pid and check it against the binary name
    pid=`cat $PIDFILE`
    if ! running_pid $pid $DAEMON; then
        rm $PIDFILE
        return 1
    fi
    return 0
}

force_stop() {
# Forcefully kill the process
    [ ! -f "$PIDFILE" ] && return
    if running ; then
        kill -15 $pid
        # Is it really dead?
        [ -n "$DODTIME" ] && sleep "$DODTIME"s
        if running ; then
            kill -9 $pid
            [ -n "$DODTIME" ] && sleep "$DODTIME"s
            if running ; then
                echo "Cannot kill $NAME (pid=$pid)!"
                exit 1
            fi
        fi
    fi
    rm -f $PIDFILE
    return 0
}

is_not_running() {
    if ! running; then
        echo "$NAME is not running."
        exit 1
    fi
}

do_start() {
    off_echo=$1
    [ $off_echo ] || echo -n "Starting $DESC: "
    if running; then
        echo "$NAME is already running."
#        exit 0;
    fi
    start-stop-daemon --start --quiet --pidfile $PIDFILE \
        --exec $DAEMON -- $OPT || true
    if running; then
        [ $off_echo ] || echo "$NAME."
    else
        echo " ERROR."
    fi
}

do_stop() {
    off_echo=$1
    [ $off_echo ] || echo -n "Stopping $DESC: "
    start-stop-daemon --stop --quiet --pidfile $PIDFILE \
        --exec $DAEMON || true
    [ -f $PIDFILE ] && rm $PIDFILE
    [ $off_echo ] || echo "$NAME."
}

case "$1" in
    start)
      if test -z "$2" ; then
        for CONFIG in `cd $CONFIG_DIR; ls *.conf 2> /dev/null`; do
            NAME=${CONFIG%%.conf}
            PIDFILE=/var/run/$NAME.pid
            OPT="-d -p $PIDFILE -c $CONFIG_DIR/$CONFIG"
            do_start
        done
      else
        while shift ; do
          [ -z "$1" ] && break
          NAME=$1
          if test -e $CONFIG_DIR/$NAME.conf ; then
            PIDFILE=/var/run/$NAME.pid
            OPT="-d -p $PIDFILE -c $CONFIG_DIR/$NAME.conf"
            do_start
          else
            echo "  Starting ziproxy '$NAME': missing $CONFIG_DIR/$NAME.conf file !"
            exit 0
          fi
        done
      fi
        ;;
    stop)
      if test -z "$2" ; then
        for CONFIG in `cd $CONFIG_DIR; ls *.conf 2> /dev/null`; do
            NAME=${CONFIG%%.conf}
            PIDFILE=/var/run/$NAME.pid
            do_stop
        done
      else
        while shift ; do
          [ -z "$1" ] && break
          NAME=$1
          if test -e $CONFIG_DIR/$NAME.conf ; then
            PIDFILE=/var/run/$NAME.pid
            do_stop
          else
            echo "  Stopping ziproxy '$NAME': missing $CONFIG_DIR/$NAME.conf file !"
            exit 0
          fi
        done
      fi
        ;;
    force-stop)
        echo -n "Forcefully stopping $DESC: "
        is_not_running
        force_stop
        if ! running; then
            echo "$NAME."
        else
            echo " ERROR."
        fi
        ;;
    restart|force-reload)
       if test -z "$2" ; then
        for CONFIG in `cd $CONFIG_DIR; ls *.conf 2> /dev/null`; do
            NAME=${CONFIG%%.conf}
            PIDFILE=/var/run/$NAME.pid
            OPT="-d -p $PIDFILE -c $CONFIG_DIR/$CONFIG"
            echo -n "Restarting $DESC: "
            is_not_running
            do_stop 1
            [ -n "$DODTIME" ] && sleep $DODTIME
            do_start 1
            echo "$NAME."
        done
      else
        while shift ; do
          [ -z "$1" ] && break
          NAME=$1
          if test -e $CONFIG_DIR/$NAME.conf ; then
            echo -n "Restarting $DESC: "
            PIDFILE=/var/run/$NAME.pid
            OPT="-d -p $PIDFILE -c $CONFIG_DIR/$NAME.conf"
            is_not_running
            do_stop 1
            [ -n "$DODTIME" ] && sleep $DODTIME
            do_start 1
            echo "$NAME."
          else
            echo "  Stopping ziproxy '$NAME': missing $CONFIG_DIR/$NAME.conf file !"
            exit 0
          fi
        done
      fi
        ;;
    status)
       if test -z "$2" ; then
        for CONFIG in `cd $CONFIG_DIR; ls *.conf 2> /dev/null`; do
          NAME=${CONFIG%%.conf}
          PIDFILE=/var/run/$NAME.pid
          echo -n "$NAME is "
          if running ;  then
             echo "running."
          else
            echo "not running."
            exit 1
          fi
        done
      else
        while shift ; do
          [ -z "$1" ] && break
          NAME=$1
          PIDFILE=/var/run/$NAME.pid
                    echo -n "$NAME is "
          if running ;  then
             echo "running."
          else
            echo "not running."
            exit 1
          fi
        done
      fi
        ;;
    *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {start|stop|restart|force-reload|status|force-stop}" >&2
        exit 1
        ;;
esac

exit 0
