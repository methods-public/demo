{
  "name": "vault-certificate",
  "description": "Installs/Configures certificates, private keys, CA root bundles from Hashicorp Vault.",
  "long_description": "# Vault Certificate cookbook [![license](https://img.shields.io/badge/license-Apache%20v2-blue.svg)](LICENSE)\n\n[![Build Status](https://travis-ci.org/ist-dsi/cookbook-vault-certificate.svg?branch=master)](https://travis-ci.org/ist-dsi/cookbook-vault-certificate)\n\nChef library cookbook to manage SSL certificates fetched from HashiCorp Vault.\n\n### Requirements\n\nYour Vault server must have a [key-value](https://www.vaultproject.io/docs/secrets/kv/index.html) and a\n[pki](https://www.vaultproject.io/docs/secrets/pki/index.html) backend configured.\n\n### Platforms\n\nTested on:\n\n- CentOS\n- Debian\n- Ubuntu\n- Fedora\n\n### Chef\n\n- Chef 12.8+\n\n## Resources\n\n### vault_certificate\n\nThis resource is able to fetch ssl certificates, their corresponding chain and private key from HashiCorp Vault.\n\nUsing the default settings, the following usage fetches the certificate from Vault:\n\n- On path `secret/example-service/production/common/certificates/example-service.example.com`, if the node is in a **static** environment (for example, if we are in `production`)\n- With `pki/issue/example-dot-com common_name=example-service.example.com`, if the node is in a **dynamic** environment\n\n```ruby\nvault_certificate 'example-service.example.com' do\n  service_name 'example-service'\n  pki_role 'example-dot-com'\n  \n  address 'https://my-vault.example.com'\n  token 'efad6fc1-bf37-7a10-fb78-67ae8756c219'\nend\n```\n\n#### .certificate, .key, .chain helper method usage\n\nSome helper methods are exposed for retrieving key/certificate paths in other recipes:\n\n  - `.certificate` - The final path of the certificate file. For example using the defaults and on CentOS: `/etc/pki/tls/certs/example-service.example.com.pem`.\n  - `.key` - The final path of the key file. For example using the defaults and on CentOS: `/etc/pki/tls/private/example-service.example.com.key`\n  - `.chain` - The final path of the chain file. For example using the defaults and on CentOS: `/etc/pki/tls/certs/example-service.example.com-bundle.pem`\n\n```ruby\ncert = vault_certificate 'example-service.example.com' do\n  service_name 'example-service'\n  pki_role 'example-dot-com'\n  combine_certificate_and_chain true # Because we will be using the certificate on Nginx.\n \n  address 'https://my-vault.example.com'\n  token 'efad6fc1-bf37-7a10-fb78-67ae8756c219'\nend\n\n\nnginx_site 'proxy' do\n  template 'proxy.erb'\n  variables(\n    'certificate' => cert\n  )\n  action :enable\nend\n```\n\nThen in `proxy.erb`:\n\n```\nserver {\n  listen                443 ssl http2;\n  listen                [::]:443 ssl http2;\n  server_name           example-service.example.com;\n  \n  ssl_certificate       <%= @certificate.certificate %>;\n  ssl_certificate_key   <%= @certificate.key %>;\n}\n```\n  \n#### What constitutes a static/dynamic environment?\n`vault_certificate` has a property called `static_environments` which is an array of regexes. If `environment` matches\nany of those regexes then the node is considered to be in a static environment. Otherwise it is considered to\nbe in a dynamic environment.\n\n#### How can I change/customize the paths?\nYou can either set `static_path` and/or `dynamic_path` and `dynamic_options` directly. Alternately, you can use any of \nthe other properties to customize the path. For example if you set `static_mountpoint` to `base-services-secrets` then \nthe path for the static environments would be:\n\n  `base-services-secrets/example-service/production/common/certificates/example-service.example.com`\n\nSee the list of properties bellow.\n\n#### General properties\n\n  - `certificate_common_name` - CN of the certificate. No default, **this must be specified**.\n  - `environment` - the environment on which the node is being provisioned. Default: the chef environment.\n  - `static_environments` - an array of regexes used to compute whether the node is being provisioned in a static or dynamic environment.\n                            If `environment` matches any of the regexes then `static_path` will be used. Otherwise `dynamic_path` will be used.\n                            Default: `[/production/, /staging/]`.\n\n#### Vault properties\n\n  - `address` - the address of the Vault Server. Default: `http://127.0.0.1:8200`.\n  - `token` - the token used to authenticate against the Vault Server. No default, **this must be specified**.\n\n#### Static environment properties\n  \n  - `static_mountpoint` - the Vault mountpoint used for static environments. Default: `secret`\n  - `service_name` - the name of the service being provisioned. No default, this must be specified on static environments.\n  - `version` - the specific version of the service that is being provisioned. No default, this must be specified when `use_common_path` is false.\n  - `common_path` - the path to use in `static_path` when `use_common_path` is set to true. Default: `common`.\n  - `use_common_path` - whether to use `common_path` in `static_path`. Default: `true`.\n  - `certificates_path` - the last path to use in `static_path`. This allows having multiple certificates for a single service. Default: `certificates`.\n  - `static_path` - the full path used to get the certificate from Vault in static environments. Default: using the defaults it would be\n                    `secret/example-service/#{node.environment}/common/certificates/#{certificate_common_name}`.\n\n#### Dynamic environment properties\n                    \n  - `dynamic_mountpoint` - the Vault mountpoint used for dynamic environments. Default: `pki/issue`.\n  - `pki_role` - the role used in Vault pki to generate new certificates. No default, this must be specified on dynamic environments.\n  - `dynamic_path` - the full path used to get the certificate from Vault in dynamic environments. Default: using the defaults it would be\n                     `pki/issue/#{pki_role}`.\n  - `dynamic_options` - the options to pass to the pki Vault backend. Default: `{ common_name: \"#{certificate_common_name}\" }`.\n\n#### Certificate bundles properties\n\n  - `combine_certificate_and_chain` - whether to combine the certificate and the CA trust chain in a single file in that\n                                      order. Useful to use in Nginx. Default: `false`.\n  - `combine_all` - whether to combine the certificate, the CA trust chain, and the private key in a single file in that\n                    order. Useful to use in HAProxy. Default: `false`.\n\n#### Stores (PKCS12 and Java) properties\n  \n  - `store_path` - the top-level directory where stores will be created.\n  - `store_password` - the password used to protected the store.\n  - `key_encryption_password` - the password used to encrypt the key inside the store.\n                                If not set, set to nil or set to empty string the key will not be encrypted.\n  - `key_encryption_cipher` - the cipher used to encrypt the key.\n  - `keystore_password` - the password for the keystore. By default the same as store_password.\n                          Having a separate property for the keystore password allows having different passwords for the\n                          keystore and the truststore when using the action create_key_and_trust_stores.\n  - `keystore_filename` - the filename the keystore will have on the filesystem. Default \"#{certificate_common_name}.keystore.jks\".\n  - `truststore_password` - the password for the truststore. By default the same as store_password.\n                            H**aving a separate property for the truststore password allows having different passwords for the\n                            keystore and the truststore when using the action create_key_and_trust_stores.\n  - `truststore_filename` - the filename the truststore will have on the filesystem. Default \"#{certificate_common_name}.truststore.jks\".\n  - `pkcs12store_filename` - the filename the pkcs12 store will have on the filesystem. By default \"#{certificate_common_name}.pkcs12\".\n\n#### Filesystem properties\n\n  - `ssl_path` - directory where the certificates, chains, and keys will be stored. The final path might be different depending on `create_subfolders`.\n                 The default is SO dependent, see [attributes](attributes/defaults.rb) for the final value.\n  - `create_subfolders` - whether to create `certs` and `private` sub-folders inside `ssl_path`.\n                          The default is SO dependent, see [attributes](attributes/defaults.rb) for the final value.\n  - `certificate_filename` - filename of the certificate. Default: `\"#{certificate_common_name}.pem\"`.\n  - `chain_filename` - filename of the CA chain bundle. Default: `\"#{certificate_common_name}-bundle.crt\"`.\n  - `key_filename` - filename of the private key. Default: `\"#{certificate_common_name}.key\"`.\n  - `owner` - owner of the subfolders, the certificate, the chain and the private key. Default: `root`.\n  - `group` - group of the subfolders, the certificate, the chain and the private key. Default: `root`.\n\n## Attributes\n\nIn order to promote code reuse most of the properties can be defined via an attribute. This allows, for example, to define\nthe Vault `address` and `token` just once without the need to explicitly define it for every invocation of `vault_certificate`:\n\n```ruby\nnode.normal['vault_certificate']['address'] = 'https://my-vault.my-domain.gtld'\nnode.normal['vault_certificate']['token'] = '<my-token>'\n\nvault_certificate 'example-service.example.com' do\n  service_name 'example-service'\n  pki_role 'example-dot-com'\nend\n\nvault_certificate 'db.example-service.example.com' do\n  service_name 'example-service'\n  pki_role 'example-dot-com'\nend\n```\n\nSee the [attributes file](attributes/defaults.rb) for a full list of supported attributes.\n\n## Actions\n\n  - `create` - the default action. Creates the certificate, private key and chain.\n  - `create_pkcs12_store` - creates a PKCS12 store on `store_path` and `store_password`.\n  - `create_keystore` - creates a Java keystore using `keytool` (you must have it installed if you have java installed it will be installed).\n  - `create_truststore` - creates a Java truststore using `keytool` (you must have it installed if you have java installed it will be installed).\n  - `create_key_and_trust_stores` - creates a Java keystore and a truststore in one go. It is more efficient since it just makes a request to Vault.\n\n## License\nvault_certificate is open source and available under the [Apache v2 license](LICENSE).",
  "maintainer": "Simão Martins",
  "maintainer_email": "simao.martins@tecnico.ulisboa.pt",
  "license": "Apache-2.0",
  "platforms": {
    "centos": ">= 0.0.0",
    "debian": ">= 0.0.0",
    "ubuntu": ">= 0.0.0",
    "fedora": ">= 0.0.0"
  },
  "dependencies": {

  },
  "providing": {
    "vault_certificate": ">= 0.0.0"
  },
  "attributes": {

  },
  "recipes": {

  },
  "version": "0.4.0",
  "source_url": "https://github.com/ist-dsi/cookbook-vault-certificate",
  "issues_url": "https://github.com/ist-dsi/cookbook-vault-certificate/issues",
  "privacy": false,
  "chef_versions": [
    [
      ">= 12.8"
    ]
  ],
  "ohai_versions": [

  ],
  "gems": [
    [
      "vault"
    ]
  ]
}
