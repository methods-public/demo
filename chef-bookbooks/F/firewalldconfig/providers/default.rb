#
# Cookbook Name:: firewalldconfig
# Provider:: default
#
# Copyright:: 2015, The University of Illinois at Chicago

def whyrun_supported?
  true
end

action :create do
  merge_defaults_into_new
  new_resource.updated_by_last_action(merge_and_converge)
end

action :create_if_missing do
  if @current_resource.exists
    Chef::Log.debug("firewalld already configured at #{new_resource.file_path}")
    new_resource.updated_by_last_action(false)
    next
  end

  action_create
end

action :merge do
  new_resource.updated_by_last_action(merge_and_converge)
end

def self.read_conf(path = nil)
  path = "#{FirewalldconfigUtil.etc_dir}/firewalld.conf" if path.nil?
  return {} unless ::File.file? path
  settings = {}
  ::File.open(path).each do |line|
    next unless /^(?<key>\w+)=(?<value>.*)/ =~ line
    opt = FirewalldconfigUtil.CONFIG_OPT[key]
    next if opt.nil?
    settings[opt[:sym]] = opt[:val].call(value)
  end
  settings
end

def load_current_resource
  @current_resource = Chef::Resource::Firewalldconfig.new(@new_resource.name)
  @current_resource.file(@new_resource.file)
  conf = FirewalldconfigUtil.read_conf(@new_resource.file_path)
  conf.each do |a, v|
    @current_resource.method(a).call(v)
  end
end

def write_conf
  lines = read_conf_lines
  set_options = substitute_conf_lines(lines)
  add_conf_lines(lines, FirewalldconfigUtil.CONFIG_OPT.keys - set_options)
  fh = ::File.open(new_resource.file_path, 'w')
  lines.each do |line|
    fh.puts line
  end
  fh.close
end

def read_conf_lines
  return ::File.open(
    new_resource.file_path
  ).readlines if ::File.file? new_resource.file_path
  ["# Config generated by chef firewalldconf cookbook.\n"]
end

def substitute_conf_lines(lines)
  set_opts = []
  lines.each do |line|
    FirewalldconfigUtil.CONFIG_OPT.each do |opt, info|
      set_opts << opt if line.gsub!(
        /^#{opt}=.*/,
        "#{opt}=#{new_resource.method(info[:sym]).call}"
      )
    end
  end
  set_opts
end

def add_conf_lines(lines, opts)
  opts.each do |opt|
    lines << "#{opt}=#{new_resource.method(FirewalldconfigUtil.CONFIG_OPT[opt][:sym]).call}"
  end
end

def merge_current_into_new
  FirewalldconfigUtil.CONFIG_OPT.each_value do |opt|
    attr = opt[:sym]
    new_val = @new_resource.method(attr).call
    current_val = @current_resource.method(attr).call
    @new_resource.method(attr).call(current_val) if new_val.nil?
  end
end

def merge_defaults_into_new
  FirewalldconfigUtil.CONFIG_OPT.each_value do |opt|
    @new_resource.method(opt[:sym]).call(
      opt[:default]
    ) if @new_resource.method(opt[:sym]).call.nil?
  end
end

def merge_and_converge
  # Fill out any missing values in @new_resource from @current_resource
  merge_current_into_new
  merge_defaults_into_new

  if @new_resource == @current_resource
    Chef::Log.debug "#{action} #{ new_resource.file } already as specified."
    return false
  end

  converge_by(
    "#{action} firewalld conf #{new_resource.file_path}"
  ) do
    write_conf
    new_resource.updated_by_last_action(true)
  end
end
