{
  "name": "netscaler",
  "description": "A collection of resources for managing Citrix NetScaler",
  "long_description": "[![Build Status](https://secure.travis-ci.org/daptiv/netscaler.png)](http://travis-ci.org/daptiv/netscaler)\n\n# netscaler cookbook\n\nA collection of resources for managing Citrix NetScaler (Nitro API).\n\nThis has been written so that adding a missing NetScaler resource *should* be easy.\n\nCreating a new resource\n\n1.  All resources should have required attributes: hostname, username, password, and the resource name\n2.  All other attributes (payload for rest call) should default to nil.\n  1. Use http://\\<netscaler_ip\\>/nitro/v1/config/<resource_name> to see available payload options.\n\nCreating a new provider\n\n1.  Actions supported: \n  * :create - calls `create_resource`\n  * :delete - calls `delete_resource`\n  * :bind   - calls `bind_resource`\n2.  Attributes in the payload should be passed in as a hash\n3.  Add new row in payload_filter.rb for @@attribute_list_by_resource.  The array should contain keys from the payload that can not be updated via the Nitro Api.\n4.  `resource_type` should be the the feature that you're manipulating (ie server, lbvserver, etc)\n5.  `resource_id` should be set to the key of the resource (ie name, servicegroupname, etc)\n6.  Be carefull of chef reserved words.  If you look at the `netscaler_server` resource/provider\nyou'll see I use the payload key as my attribute names for everthing except for `servername` which\ndoesn't exist as a key for the `server` resource type.  The key in the options hash is still 'name'\nthough.  The options hash key has to match the netscaler payload key.\n\n## Supported Platforms\n\n* Any supported by chef\n\nLibrary Methods\n===============\n\nNetscaler::Helper\n-----------------\nA collection of methods for CRUD operations on NetScaler\n\n### Methods\n\n| Name | Vars | Description |\n|------|------|-------------|\n| create_resource | resource_type, resource_id, hostname, username, password, payload = {} | Make a post call to the netscaler |\n| update_resource | resource_type, resource_id, hostname, username, password, payload = {} | Make a put call to the netscaler |\n| delete_resource | resource_type, resource_id, hostname, username, password, payload = {} | Make a delete call to the netscaler |\n\nLibrary Classes\n===============\n\nNetscaler::Utilites\n-----------------\nA utility class used by Netscaler::Helper\n\n### Methods\n\n| Name | Vars | Description |\n|------|------|-------------|\n| resource_exists? | resource_type, resource | Check if a resource exists |\n| key_value_exists? | resource_type, resource, key, value | Check if a key/value exists |\n| build_request | method, resource_type, resource, options | Create the rest call |\n| build_url | method, primary_hostname, resource_type, resource, resource_id, binding | Create the url used for the rest call |\n| find_primary | method, resource_type, resource, resource_id, binding, payload | Given an array of options, find the primary Netscaler |\n| save_config | | Save the netscaler configuration |\n| logout | | Log out of the netscaler |\n\nNetscaler::PayloadFilter\n-----------------\nFilters out key/value params not allowed in the payload for updates.\n\n### Methods\n\n| Name | Vars | Description |\n|------|------|-------------|\n| filter_uneditable_attributes | resource_type, payload | remove attributes that can not be updated. |\n\n### Examples\n    # New netscaler instance\n    netscalers = search(:node, \"role:netscaler AND chef_environment:#{node.chef_environment}\"\n    netscaler_ips = netscalers.map { |n| n['ipaddress'] }\n    ns = Netscaler::Utilities.new(\n      :hostname => netscaler_ips,\n      :username => 'iamgroot',\n      :password => 'iamgroot'\n    )\n\n    # Check if a StarLord server exists\n    resource_exists = ns.resource_exists?('server','StarLord')\n\n    # Check if server StarLord exists\n    server_exists = ns.resource_exists?('server','StarLord')\n\n    # Check if StarLord server is UP in Guardians service group\n    server_up = ns.key_value_exists?(\n      'server_servicegroup_binding',\n      'StarLord',\n      'svrstate',\n      'UP'\n    )\n\n    # GET request for server StarLord\n    request = ns.build_request('get', 'server', 'StarLord')\n    response = request.execute\n\n    # Build the rest request to get StarLord server info\n    url = ns.build_url('get', '123.456.12.34', 'server', 'StarLord')\n\n    # Find the primary netscaler given an array\n    primary = ns.find_primary\n\n    # Save the configuration file\n    ns.save_config\n\n    # Logout of the netscaler\n    ns.logout\n\nResources/Providers\n===================\n\nThe idea here is that every rest call will eventually be represented with a new\nresource/provider.  Below are a few examples to get you started.\n\nnetscaler_server\n----------------\n\n### Actions\n- :create: Create a resource, updates if necessary\n- :delete: Delete an existing resource\n\n### Examples\n    # Create a new server called StarLord, update if necessary\n    netscaler_server \"Create StarLord\" do\n      servername 'StarLord'\n      hostname '123.45.123.1'\n      domainresolveretry 6\n      username 'iamgroot'\n      password 'iamgroot'\n      domain 'mydomain.com'\n      action :create\n    end\n\n    # Delete a server called StarLord\n    netscaler_server 'Delete StarLord' do\n      servername 'StarLord'\n      hostname '123.45.123.1'\n      username 'iamgroot'\n      password 'iamgroot'\n      action :delete\n    end\n\nnetscaler_servicegroup\n----------------------\n\n### Actions\n- :create: Create a resource, updates if necessary\n- :delete: Delete an existing resource\n- :bind: Bind one resource to another\n\n### Examples\n    # Create a service group called Guardians\n    netscaler_servicegroup 'Create Guardians' do\n      servicegroupname 'Guardians'\n      servicetype 'HTTP'\n      comment 'Something good, something bad'\n      hostname '123.45.123.1'\n      username 'iamgroot'\n      password 'iamgroot'\n      action :create\n    end\n\n    # Bind server StarLord to service group Guardians\n    netscaler_servicegroup 'Bind StarLord to Guardians' do\n      hostname '172.16.198.2'\n      username 'iamgroot'\n      password 'iamgroot'\n      servicegroupname 'Guardians'\n      servername 'StarLord'\n      port 80\n      action :bind\n    end\n\nnetscaler_monitor\n----------------------\n\n### Actions\n- :create: Create a resource, updates if necessary\n- :bind: Bind one resource to another\n\n### Examples\n    # Create a monitor called Xandar\n    netscaler_monitor 'Create Xandar' do\n      monitorname 'Xandar'\n      type 'PING'\n      hostname '123.45.123.1'\n      username 'iamgroot'\n      password 'iamgroot'\n      action :create\n    end\n\n    # Bind monitor Xandar to service group Guardians\n    netscaler_monitor 'Bind Xandar to Guardians' do\n      hostname '172.16.198.2'\n      username 'iamgroot'\n      password 'iamgroot'\n      monitorname 'Xandar'\n      servicegroupname 'Guardians'\n      action :bind\n    end\n\nnetscaler_lbvserver\n----------------------\n\n### Actions\n- :create: Create a resource, updates if necessary\n- :delete: Delete an existing resource\n- :bind: Bind one resource to another\n\n### Examples\n    # Create a lb vserver called Kyln\n    netscaler_lbvserver 'Create Kyln' do\n      lbvservername 'Kyln'\n      ipaddress '123.45.123.100'\n      port 80\n      servicetype 'HTTP' \n      hostname '123.45.123.1'\n      username 'iamgroot'\n      password 'iamgroot'\n      action :create\n    end\n\n    # Bind service group Guardians to lb vserver Kyln\n    netscaler_lbvserver 'Bind Guardians to Kyln' do\n      lbvservername 'Kyln'\n      servicegroupname 'Guardians'\n      hostname '123.45.123.1'\n      username 'iamgroot'\n      password 'iamgroot'\n      action :bind\n    end\n\n## List of created resources/providers\n* netscaler_server\n* netscaler_servicegroup\n* netscaler_monitor\n* netscaler_lbvserver\n\n## TO DO\n\n* More/better testing\n* Add more resource/providers\n\n## Contributing\n\n1. Fork the repository on Github\n2. Create a named feature branch (i.e. `add-new-recipe`)\n3. Write your change\n4. Write tests for your change (if applicable)\n5. Run the tests, ensuring they all pass\n6. Submit a Pull Request\n\n## License and Authors\n\nAuthor:: Changepoint Engineering (cpc_sea_teamengineering@changepoint.com) \n",
  "maintainer": "Daptiv Solutions, LLC",
  "maintainer_email": "cpc_sea_teamengineering@changepoint.com",
  "license": "All rights reserved",
  "platforms": {
    "ubuntu": ">= 0.0.0",
    "amazon": ">= 0.0.0",
    "debian": ">= 0.0.0",
    "windows": ">= 0.0.0"
  },
  "dependencies": {

  },
  "recommendations": {

  },
  "suggestions": {

  },
  "conflicting": {

  },
  "providing": {

  },
  "replacing": {

  },
  "attributes": {

  },
  "groupings": {

  },
  "recipes": {

  },
  "version": "1.0.5",
  "source_url": "https://github.com/daptiv/netscaler/",
  "issues_url": "https://github.com/daptiv/netscaler/issues",
  "privacy": false,
  "chef_versions": [

  ],
  "ohai_versions": [

  ],
  "gems": [

  ]
}
