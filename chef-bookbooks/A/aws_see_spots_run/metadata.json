{
  "name": "aws_see_spots_run",
  "version": "0.2.3",
  "description": "Installs/Configures aws_see_spots_runa spot instance management platform.",
  "long_description": "# aws_see_spots_run Cookbook\n\n## Description\n\nA chef cookbook to manage Amazon Web Services spot instances within autoscaling groups via Chef, cron jobs, aws APIs, glitter, and magic.\n\nSee the [wiki](https://github.com/dreamboxlearning/aws_see_spots_run/wiki) for details. aws_ssr is officially released [on the chef supermarket](https://supermarket.chef.io/cookbooks/aws_see_spots_run).\n\n## Requirements\n### Chef\n* Chef 11+\n\n### Cookbook dependencies\n* [Python](https://supermarket.chef.io/cookbooks/python) >= 1.0.3\n\n### Platforms\n* Debian, Ubuntu\n* CentOS, Red Hat, Fedora, Amazon Linux\n\n## Attributes\nExtended info on the [Cookbook details wiki page](https://github.com/dreamboxlearning/aws_see_spots_run/wiki/Cookbook-details#attributes-in-attributesdefaultrb).\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\n`['exec_path']` | Path where the scripts will live  | String | `'/usr/local/bin'`\n`['excluded_regions']` | Regions to exclude from ssr management | String | `'cn-north-1 us-gov-west-1'`\n`['spot_request_killer']['interval']` | Minutes between runs of `spot_request_killer` | Integer | `2`\n`['spot_request_killer']['minutes_before_stale']` | Minutes before an unfulfilled spot request is considered stale and tested for cancellation |  Integer | `8`\n`['price_monitor']['interval']` | Minutes between runs of `price_monitor` | Integer | `6`\n`['ASG_tagger']['interval']` | Minutes between runs of `ASG_tagger` | Integer | `30`\n`['ASG_tagger']['min_healthy_AZs']` | Minumum number of availability zones to require in good health before bid is adjusted | Integer | `1`\n`['health_enforcer']['interval']` | Minutes between runs of `health_enforcer` | Integer | `10`\n`['health_enforcer']['demand_expiration']` |  Minutes before an ASG which is temporarily using demand will be checked for return to spots | Integer | `50`\n`['health_enforcer']['min_health_threshold']` | Number of healthy checks required for an AZ to be considered healthy for an ASG (1, 2, or 3) | Integer | `3`\n\n## Bugs / Development / Contributing\n* Report issues/questions/feature requests on in the [Issues](https://github.com/dreamboxlearning/aws_see_spots_run/issues) section.\n* Feel free to ask questions via email.\n\nPull requests are welcome!\nIdeally create a topic branch for every separate change you make.\nFor example:\n\n1. Fork the repo\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Connect the existing git hooks (`./bin/create_local_hooks.sh`)\n4. If possible, write some tests.\n5. Commit your awesome changes (`git commit -am 'Added some feature'`)\n6. Push to the branch (`git push origin my-new-feature`)\n7. Create a new Pull Request and tell us about your changes.\n\n## LICENSE\nCopyright 2015 Dreambox Learning, Inc.\n\nLicensed under the Apache License, Version 2.0 (the “License”); you may not use this file except in\ncompliance with the License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is\ndistributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing permissions and limitations under the\nLicense.\n",
  "maintainer": "Brandon O'Connor",
  "maintainer_email": "brandoconnor@gmail.com",
  "license": "Apache 2.0",
  "platforms": {
    "ubuntu": ">= 0.0.0",
    "debian": ">= 0.0.0",
    "centos": ">= 0.0.0",
    "redhat": ">= 0.0.0",
    "fedora": ">= 0.0.0",
    "amazon": ">= 0.0.0"
  },
  "dependencies": {
    "python": ">= 0.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
  }
}